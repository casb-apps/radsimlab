import streamlit as st
import math
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import time
from datetime import datetime

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="RadSimLab Pro",
    page_icon="‚ò¢Ô∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personalizado
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #1E88E5;
        text-align: center;
        margin-bottom: 2rem;
    }
    .result-box {
        background-color: #e8f5e9;
        padding: 15px;
        border-radius: 10px;
        margin-top: 15px;
        border-left: 5px solid #4CAF50;
    }
    .warning-box {
        background-color: #ffebee;
        padding: 15px;
        border-radius: 10px;
        margin-top: 15px;
        border-left: 5px solid #F44336;
    }
    .info-box {
        background-color: #e3f2fd;
        padding: 15px;
        border-radius: 10px;
        margin-top: 15px;
        border-left: 5px solid #2196F3;
    }
    .formula-box {
        background-color: #f5f5f5;
        padding: 15px;
        border-radius: 8px;
        border-left: 4px solid #9E9E9E;
        font-family: 'Courier New', monospace;
        margin: 10px 0;
    }
    .parameter-table {
        width: 100%;
        border-collapse: collapse;
        margin: 10px 0;
    }
    .parameter-table th, .parameter-table td {
        padding: 8px 12px;
        text-align: left;
        border-bottom: 1px solid #ddd;
    }
    .parameter-table th {
        background-color: #f0f0f0;
        font-weight: bold;
    }
</style>
""", unsafe_allow_html=True)

# T√≠tulo principal
st.markdown('<h1 class="main-header">üî¨ RadSimLab Pro ‚Äì Simulador Radiol√≥gico Avan√ßado</h1>', unsafe_allow_html=True)

# Sidebar com informa√ß√µes
with st.sidebar:
    st.title("RadSimLab Pro")
    st.markdown("---")
    st.markdown("### üìä Navega√ß√£o")
    
    # Menu de m√≥dulos
    modulos = {
        "Data√ß√£o Radiom√©trica": "datacao_radiometrica",
        "Blindagem Radiol√≥gica": "blindagem",
        "Radioterapia": "radioterapia",
        "Distribui√ß√£o de Dose": "dose",
        "Aplica√ß√µes Cl√≠nicas": "clinico",
        "Aplica√ß√µes Ambientais": "ambiental",
        "Efeito Compton": "compton",
        "Produ√ß√£o de Pares": "pares",
        "Exposi√ß√£o Ocupacional": "ocupacional",
        "Cen√°rios Hist√≥ricos": "historico",
        "Decaimento Radioativo": "decaimento",
        "Modo Explicativo": "explicativo",
        "Quiz Interativo": "quiz",
        "Exportar Dados": "exportar",
        "Comparar Simula√ß√µes": "comparar"
    }
    
    modulo = st.selectbox("Selecione o m√≥dulo", list(modulos.keys()))
    
    st.markdown("---")
    st.markdown("### ‚ÑπÔ∏è Sobre")
    st.info("""
    RadSimLab Pro √© uma ferramenta educacional para simula√ß√µes
    em f√≠sica radiol√≥gica. Desenvolvido para estudantes e
    profissionais da √°rea.
    """)

# =============================================================================
# M√ìDULO 1: DATA√á√ÉO RADIOM√âTRICA
# =============================================================================

def modulo_datacao_radiometrica():
    st.header("‚è≥ Data√ß√£o Radiom√©trica")
    
    st.info("""
    **Instru√ß√µes:** 
    - Para Carbono-14: Insira a fra√ß√£o remanescente de C-14 (N/N‚ÇÄ)
    - Para outros m√©todos: Insira a raz√£o do produto de decaimento em rela√ß√£o ao elemento pai
    """)
    
    metodo = st.radio("Selecione o m√©todo:", ["Carbono-14", "Pot√°ssio-Arg√¥nio", "Ur√¢nio-Chumbo", "Rub√≠dio-Estr√¥ncio"], horizontal=True)
    
    if metodo == "Carbono-14":
        modulo_carbono14()
    elif metodo == "Pot√°ssio-Arg√¥nio":
        modulo_potassio_argonio()
    elif metodo == "Ur√¢nio-Chumbo":
        modulo_uranio_chumbo()
    elif metodo == "Rub√≠dio-Estr√¥ncio":
        modulo_rubidio_estroncio()

def modulo_carbono14():
    st.markdown("### üß™ Data√ß√£o por Carbono-14")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**Par√¢metros de Entrada:**")
        frac_remanescente = st.slider("Fra√ß√£o remanescente de C-14 (N/N‚ÇÄ)", 
                                     min_value=0.001, max_value=0.999, 
                                     value=0.5, step=0.001,
                                     help="Raz√£o entre C-14 atual e C-14 inicial")
        
        meia_vida = st.number_input("Meia-vida do C-14 (anos)", 
                                   min_value=100.0, value=5730.0, step=10.0,
                                   help="Meia-vida padr√£o: 5730 anos")
    
    with col2:
        st.markdown("**Informa√ß√µes T√©cnicas:**")
        st.markdown("""
        <table class="parameter-table">
            <tr><th>Par√¢metro</th><th>Valor</th></tr>
            <tr><td>Meia-vida do C-14</td><td>5730 anos</td></tr>
            <tr><td>Constante de decaimento (Œª)</td><td>1.21 √ó 10‚Åª‚Å¥ ano‚Åª¬π</td></tr>
            <tr><td>Faixa de data√ß√£o</td><td>at√© 50,000 anos</td></tr>
        </table>
        """, unsafe_allow_html=True)
        
        st.markdown("**üìê F√≥rmula:**")
        st.markdown('<div class="formula-box">t = (T¬Ω/ln(2)) √ó ln(1/(N/N‚ÇÄ))</div>', unsafe_allow_html=True)
    
    if st.button("üîÑ Calcular Data√ß√£o por C-14", use_container_width=True):
        if frac_remanescente <= 0 or meia_vida <= 0:
            st.error("Os valores devem ser positivos!")
            return
            
        with st.spinner("Calculando..."):
            time.sleep(0.5)
            
            # C√°lculo CORRETO da idade usando a lei do decaimento radioativo
            lambda_val = math.log(2) / meia_vida
            idade = (1 / lambda_val) * math.log(1 / frac_remanescente)
            
            st.markdown("---")
            st.markdown("### üìä Resultados")
            
            st.markdown(f'<div class="result-box"><h4>üß™ Idade estimada: <span style="color:#d32f2f">{idade:,.2f} anos</span></h4></div>', unsafe_allow_html=True)
            
            # Detalhes do c√°lculo
            st.markdown("**üîç Detalhes do C√°lculo:**")
            col_calc1, col_calc2 = st.columns(2)
            
            with col_calc1:
                st.markdown(f"- **Fra√ß√£o remanescente:** {frac_remanescente:.4f}")
                st.markdown(f"- **Meia-vida do C-14:** {meia_vida:,.0f} anos")
                st.markdown(f"- **Constante Œª:** {lambda_val:.6f} ano‚Åª¬π")
            
            with col_calc2:
                st.markdown(f"- **ln(1/(N/N‚ÇÄ)):** {math.log(1/frac_remanescente):.4f}")
                st.markdown(f"- **1/Œª:** {1/lambda_val:,.0f} anos")
                st.markdown(f"- **Idade calculada:** {idade:,.0f} anos")
            
            # Verifica√ß√£o com exemplo conhecido
            if abs(frac_remanescente - 0.5) < 0.01 and abs(meia_vida - 5730) < 1:
                st.success("‚úÖ Verifica√ß√£o: Para 50% de C-14 remanescente, a idade deve ser igual √† meia-vida (5730 anos)")
            
            # Gr√°fico do decaimento
            tempos = np.linspace(0, min(idade * 1.5, 50000), 100)
            fracoes = np.exp(-lambda_val * tempos)
            
            fig, ax = plt.subplots(figsize=(10, 6))
            ax.plot(tempos, fracoes, 'b-', linewidth=3, label='N(t)/N‚ÇÄ = e^(‚ÄìŒªt)')
            ax.plot(idade, frac_remanescente, 'ro', markersize=10, 
                   label=f'Idade estimada: {idade:.0f} anos')
            
            # Linhas de meia-vida
            for i in range(1, 6):
                t_meia = meia_vida * i
                frac_meia = 0.5 ** i
                ax.axvline(x=t_meia, color='gray', linestyle='--', alpha=0.5)
                ax.axhline(y=frac_meia, color='gray', linestyle='--', alpha=0.5)
                ax.text(t_meia, 1.02, f'{i}T¬Ω', ha='center', va='bottom', color='gray')
            
            ax.set_xlabel("Tempo (anos)")
            ax.set_ylabel("Fra√ß√£o de C-14 remanescente (N/N‚ÇÄ)")
            ax.set_title("Decaimento do Carbono-14")
            ax.legend()
            ax.grid(True)
            ax.set_ylim(0, 1.1)
            
            st.pyplot(fig)
            
            # Tabela de dados para exporta√ß√£o
            df = pd.DataFrame({
                "Tempo (anos)": tempos, 
                "Fra√ß√£o_C14": fracoes,
                "Atividade_Relativa": fracoes  # Para C-14, fra√ß√£o = atividade relativa
            })
            
            # Op√ß√µes de download
            col_dl1, col_dl2 = st.columns(2)
            with col_dl1:
                st.download_button("üì• Baixar CSV", data=df.to_csv(index=False), 
                                  file_name="carbono14_simulation.csv", mime="text/csv",
                                  use_container_width=True)
            with col_dl2:
                st.download_button("üì• Baixar TXT", data=df.to_string(index=False), 
                                  file_name="carbono14_results.txt", mime="text/plain",
                                  use_container_width=True)

def modulo_potassio_argonio():
    st.markdown("### üîã Data√ß√£o por Pot√°ssio-Arg√¥nio")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**Par√¢metros de Entrada:**")
        razao_ar_k = st.number_input("Raz√£o ‚Å¥‚Å∞Ar/‚Å¥‚Å∞K", 
                                   min_value=0.001, value=0.5, step=0.001,
                                   format="%.3f",
                                   help="Raz√£o entre Arg√¥nio-40 e Pot√°ssio-40")
        
        meia_vida = st.number_input("Meia-vida do ‚Å¥‚Å∞K (anos)", 
                                   min_value=1.0e8, value=1.25e9, 
                                   format="%.2e",
                                   help="Meia-vida padr√£o: 1.25 √ó 10‚Åπ anos")
        
        fracao_decaimento = st.number_input("Fra√ß√£o que decai para ‚Å¥‚Å∞Ar", 
                                          min_value=0.01, max_value=1.0, 
                                          value=0.1072, step=0.0001,
                                          help="Padr√£o: 0.1072 (10.72%)")
    
    with col2:
        st.markdown("**Informa√ß√µes T√©cnicas:**")
        st.markdown("""
        <table class="parameter-table">
            <tr><th>Par√¢metro</th><th>Valor</th></tr>
            <tr><td>Meia-vida do ‚Å¥‚Å∞K</td><td>1.25 √ó 10‚Åπ anos</td></tr>
            <tr><td>Fra√ß√£o para ‚Å¥‚Å∞Ar</td><td>10.72%</td></tr>
            <tr><td>Faixa de data√ß√£o</td><td>10‚Å¥ - 10‚Åπ anos</td></tr>
        </table>
        """, unsafe_allow_html=True)
        
        st.markdown("**üìê F√≥rmula:**")
        st.markdown('<div class="formula-box">t = (1/Œª) √ó ln(1 + (‚Å¥‚Å∞Ar/‚Å¥‚Å∞K) √ó (Œª/Œª_Ar))</div>', unsafe_allow_html=True)
        st.markdown('*Simplificado para: t = (1/Œª) √ó ln(1 + R √ó (1/f))*', unsafe_allow_html=True)
    
    if st.button("üîÑ Calcular Data√ß√£o por K-Ar", use_container_width=True):
        if razao_ar_k <= 0 or meia_vida <= 0 or fracao_decaimento <= 0:
            st.error("Todos os valores devem ser positivos!")
            return
            
        # C√°lculo CORRETO considerando a fra√ß√£o de decaimento
        lambda_val = math.log(2) / meia_vida
        idade = (1 / lambda_val) * math.log(1 + (razao_ar_k / fracao_decaimento))
        
        st.markdown("---")
        st.markdown("### üìä Resultados")
        
        idade_millions = idade / 1e6
        
        if idade_millions < 1:
            st.markdown(f'<div class="result-box"><h4>üîã Idade estimada: <span style="color:#d32f2f">{idade:,.2f} anos</span></h4></div>', unsafe_allow_html=True)
        else:
            st.markdown(f'<div class="result-box"><h4>üîã Idade estimada: <span style="color:#d32f2f">{idade_millions:,.2f} milh√µes de anos</span></h4></div>', unsafe_allow_html=True)
        
        # Detalhes do c√°lculo
        st.markdown("**üîç Detalhes do C√°lculo:**")
        
        col_calc1, col_calc2 = st.columns(2)
        
        with col_calc1:
            st.markdown(f"- **Raz√£o ‚Å¥‚Å∞Ar/‚Å¥‚Å∞K:** {razao_ar_k:.4f}")
            st.markdown(f"- **Meia-vida do ‚Å¥‚Å∞K:** {meia_vida:.2e} anos")
            st.markdown(f"- **Fra√ß√£o para ‚Å¥‚Å∞Ar:** {fracao_decaimento:.4f}")
        
        with col_calc2:
            st.markdown(f"- **Constante Œª:** {lambda_val:.3e} ano‚Åª¬π")
            st.markdown(f"- **Raz√£o ajustada:** {razao_ar_k/fracao_decaimento:.4f}")
            st.markdown(f"- **ln(1 + R/f):** {math.log(1 + razao_ar_k/fracao_decaimento):.4f}")
        
        # Gr√°fico
        tempos = np.linspace(0, min(idade * 1.5, 5e9), 100)
        razoes = fracao_decaimento * (np.exp(lambda_val * tempos) - 1)
        
        fig, ax = plt.subplots(figsize=(10, 6))
        ax.plot(tempos/1e6, razoes, 'g-', linewidth=3, label='R(t) = f √ó (e^(Œªt) - 1)')
        ax.plot(idade/1e6, razao_ar_k, 'ro', markersize=10, 
               label=f'Idade estimada: {idade/1e6:.2f} milh√µes de anos')
        
        ax.set_xlabel("Tempo (milh√µes de anos)")
        ax.set_ylabel("Raz√£o ‚Å¥‚Å∞Ar/‚Å¥‚Å∞K")
        ax.set_title("Ac√∫mulo de Arg√¥nio-40 no M√©todo K-Ar")
        ax.legend()
        ax.grid(True)
        
        st.pyplot(fig)
        
        # Tabela de dados
        df = pd.DataFrame({
            "Tempo (milh√µes de anos)": tempos/1e6,
            "Razao_Ar_K": razoes
        })
        
        st.download_button("üì• Baixar CSV", data=df.to_csv(index=False), 
                          file_name="potassio_argonio_simulation.csv", mime="text/csv",
                          use_container_width=True)

def modulo_uranio_chumbo():
    st.markdown("### ‚öõÔ∏è Data√ß√£o por Ur√¢nio-Chumbo")
    st.info("M√≥dulo em desenvolvimento. Use Pot√°ssio-Arg√¥nio ou Carbono-14 para data√ß√£o.")
    st.warning("Este m√©todo utiliza as s√©ries de decaimento do U-238 para Pb-206 e U-235 para Pb-207")

def modulo_rubidio_estroncio():
    st.markdown("### üî¨ Data√ß√£o por Rub√≠dio-Estr√¥ncio")
    st.info("M√≥dulo em desenvolvimento. Use Pot√°ssio-Arg√¥nio ou Carbono-14 para data√ß√£o.")
    st.warning("Este m√©todo utiliza o decaimento do Rb-87 para Sr-87 com meia-vida de 48.8 bilh√µes de anos")

# =============================================================================
# M√ìDULO 2: BLINDAGEM RADIOL√ìGICA
# =============================================================================

def modulo_blindagem():
    st.header("üß± C√°lculo de Blindagem Radiol√≥gica")
    
    st.info("""
    **Instru√ß√µes:** 
    - Selecione o material de blindagem
    - Informe a dose inicial e a dose desejada ap√≥s a blindagem
    - O sistema calcular√° a espessura necess√°ria usando a Lei de Atenua√ß√£o Exponencial
    """)
    
    materials = {
        "Chumbo": {"mu": 0.77, "densidade": 11.34, "cor": "#FF6B6B"},
        "Concreto": {"mu": 0.15, "densidade": 2.35, "cor": "#4ECDC4"},
        "√Ågua": {"mu": 0.07, "densidade": 1.00, "cor": "#45B7D1"},
        "A√ßo": {"mu": 0.43, "densidade": 7.85, "cor": "#96CEB4"},
        "Tungst√™nio": {"mu": 1.20, "densidade": 19.25, "cor": "#FECA57"},
        "Ur√¢nio": {"mu": 1.50, "densidade": 19.10, "cor": "#FF9FF3"}
    }
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("**Sele√ß√£o do Material:**")
        material = st.selectbox("Material", options=list(materials.keys()))
        mu = materials[material]["mu"]
        densidade = materials[material]["densidade"]
        cor = materials[material]["cor"]
        
        st.markdown(f"**Propriedades do {material}:**")
        st.markdown(f"- Œº = {mu} cm‚Åª¬π")
        st.markdown(f"- œÅ = {densidade} g/cm¬≥")
        st.markdown(f"- Camada semi-redutora: {math.log(2)/mu:.2f} cm")
        
    with col2:
        st.markdown("**Par√¢metros de Radia√ß√£o:**")
        I0 = st.number_input("Dose inicial (¬µSv/h)", 
                           min_value=0.01, value=1000.0, step=10.0,
                           help="Dose sem blindagem")
        
        I = st.number_input("Dose desejada (¬µSv/h)", 
                          min_value=0.01, value=10.0, step=1.0,
                          help="Dose m√°xima permitida ap√≥s blindagem")
        
        energia = st.number_input("Energia dos f√≥tons (MeV)", 
                                min_value=0.01, value=1.0, step=0.1,
                                help="Energia m√©dia da radia√ß√£o")
    
    with col3:
        st.markdown("**Fator de Build-up:**")
        buildup = st.selectbox("Considerar fator de build-up?", 
                             options=["N√£o", "Sim - Baixo", "Sim - M√©dio", "Sim - Alto"],
                             index=0,
                             help="Fator que considera radia√ß√£o espalhada")
        
        st.markdown("**üìê F√≥rmula da Atenua√ß√£o:**")
        st.markdown('<div class="formula-box">I = I‚ÇÄ √ó B √ó e^(-Œºx)</div>', unsafe_allow_html=True)
        st.markdown('<div class="formula-box">x = (1/Œº) √ó ln(I‚ÇÄ √ó B / I)</div>', unsafe_allow_html=True)
    
    # Definir fator de build-up
    fatores_buildup = {
        "N√£o": 1.0,
        "Sim - Baixo": 1.5,
        "Sim - M√©dio": 2.0,
        "Sim - Alto": 3.0
    }
    B = fatores_buildup[buildup]
    
    if st.button("üß± Calcular Blindagem", use_container_width=True):
        if I0 <= 0 or I <= 0 or mu <= 0:
            st.error("Todos os valores devem ser positivos!")
            return
            
        if I >= I0:
            st.error("A dose desejada deve ser menor que a dose inicial!")
            return
            
        # C√°lculo CORRETO da espessura considerando build-up
        x = (1 / mu) * math.log((I0 * B) / I)
        
        # Calcular tamb√©m a massa por √°rea
        massa_por_area = x * densidade  # kg/m¬≤ (considerando cm ‚Üí m)
        
        st.markdown("---")
        st.markdown("### üìä Resultados")
        
        st.markdown(f'<div class="result-box"><h4>üß± Espessura necess√°ria de {material}: <span style="color:#d32f2f">{x:.2f} cm</span></h4></div>', unsafe_allow_html=True)
        
        if buildup != "N√£o":
            st.markdown(f'<div class="info-box"><h4>üìä Com fator de build-up: <span style="color:#1976D2">{B:.1f}</span></h4></div>', unsafe_allow_html=True)
        
        st.markdown(f'<div class="info-box"><h4>‚öñÔ∏è Massa por √°rea: <span style="color:#1976D2">{massa_por_area:.1f} kg/m¬≤</span></h4></div>', unsafe_allow_html=True)
        
        # Detalhes do c√°lculo
        st.markdown("**üîç Detalhes do C√°lculo:**")
        
        col_calc1, col_calc2 = st.columns(2)
        
        with col_calc1:
            st.markdown(f"- **Dose inicial (I‚ÇÄ):** {I0} ¬µSv/h")
            st.markdown(f"- **Dose desejada (I):** {I} ¬µSv/h")
            st.markdown(f"- **Coeficiente Œº:** {mu} cm‚Åª¬π")
            st.markdown(f"- **Fator B:** {B}")
        
        with col_calc2:
            st.markdown(f"- **I‚ÇÄ√óB/I:** {(I0 * B) / I:.1f}")
            st.markdown(f"- **ln(I‚ÇÄ√óB/I):** {math.log((I0 * B) / I):.2f}")
            st.markdown(f"- **1/Œº:** {1/mu:.2f} cm")
            st.markdown(f"- **Espessura (x):** {x:.2f} cm")
        
        # Gr√°fico de atenua√ß√£o
        espessuras = np.linspace(0, x * 2, 100)
        doses = I0 * B * np.exp(-mu * espessuras)
        
        fig, ax = plt.subplots(figsize=(10, 6))
        ax.plot(espessuras, doses, color=cor, linewidth=3, 
               label=f'Blindagem de {material} (Œº={mu} cm‚Åª¬π)')
        ax.plot(x, I, 'ro', markersize=10, label=f'Espessura necess√°ria: {x:.1f} cm')
        ax.axhline(y=I, color='r', linestyle='--', label='Dose desejada')
        
        ax.set_xlabel("Espessura (cm)")
        ax.set_ylabel("Dose (¬µSv/h)")
        ax.set_title(f"Atenua√ß√£o da Radia√ß√£o com {material}")
        ax.legend()
        ax.grid(True)
        ax.set_yscale('log')  # Escala log para melhor visualiza√ß√£o
        
        st.pyplot(fig)
        
        # Compara√ß√£o entre materiais
        st.markdown("### üìä Compara√ß√£o entre Materiais")
        
        comparacao = []
        for mat, props in materials.items():
            esp = (1 / props["mu"]) * math.log((I0 * B) / I)
            massa = esp * props["densidade"]
            comparacao.append({
                "Material": mat,
                "Œº (cm‚Åª¬π)": props["mu"],
                "Espessura (cm)": esp,
                "Massa (kg/m¬≤)": massa
            })
        
        df_comp = pd.DataFrame(comparacao)
        st.dataframe(df_comp.style.format({
            "Œº (cm‚Åª¬π)": "{:.2f}",
            "Espessura (cm)": "{:.2f}",
            "Massa (kg/m¬≤)": "{:.1f}"
        }), use_container_width=True)
        
        # Resultado para download
        resultado = f"""MATERIAL: {material}
DOSE INICIAL: {I0} ¬µSv/h
DOSE DESEJADA: {I} ¬µSv/h
ENERGIA: {energia} MeV
FATOR BUILD-UP: {B}
COEFICIENTE Œº: {mu} cm‚Åª¬π
DENSIDADE: {densidade} g/cm¬≥
ESPESSURA NECESS√ÅRIA: {x:.2f} cm
MASSA POR √ÅREA: {massa_por_area:.1f} kg/m¬≤
CAMADA SEMI-REDUTORA: {math.log(2)/mu:.2f} cm"""
        
        st.download_button("üì• Baixar Relat√≥rio", data=resultado, 
                          file_name=f"blindagem_{material.lower()}.txt", 
                          mime="text/plain", use_container_width=True)

# =============================================================================
# M√ìDULO 3: RADIOTERAPIA
# =============================================================================

def modulo_radioterapia():
    st.header("üìÖ Planejamento Radioter√°pico")
    
    st.info("""
    **Instru√ß√µes:**
    - **Dose prescrita:** Dose total que o paciente deve receber
    - **Taxa de dose:** Velocidade de administra√ß√£o da radia√ß√£o  
    - **N√∫mero de sess√µes:** Total de tratamentos
    """)
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("**üíâ Par√¢metros do Tratamento:**")
        dose_total = st.number_input("Dose prescrita total (Gy)", 
                                   min_value=0.1, value=60.0, step=5.0,
                                   help="Dose total do tratamento")
        
    with col2:
        taxa_dose = st.number_input("Taxa de dose (Gy/min)", 
                                  min_value=0.01, value=2.0, step=0.1,
                                  help="Velocidade de administra√ß√£o da radia√ß√£o")
    
    with col3:
        num_sessoes = st.number_input("N√∫mero de sess√µes", 
                                    min_value=1, value=30, step=1,
                                    help="Total de sess√µes de tratamento")
        
        dias_semana = st.number_input("Sess√µes por semana", 
                                    min_value=1, max_value=7, value=5, step=1,
                                    help="Tratamentos por semana")
    
    # C√°lculos adicionais
    col_calc1, col_calc2 = st.columns(2)
    
    with col_calc1:
        st.markdown("**üìê F√≥rmulas:**")
        st.markdown('<div class="formula-box">Dose/sess√£o = Dose_total / N_sess√µes</div>', unsafe_allow_html=True)
        st.markdown('<div class="formula-box">Tempo/sess√£o = Dose/sess√£o / Taxa_dose</div>', unsafe_allow_html=True)
    
    with col_calc2:
        st.markdown("**‚è±Ô∏è Dura√ß√£o do Tratamento:**")
        semanas = num_sessoes / dias_semana
        st.markdown(f"- **Semanas totais:** {semanas:.1f}")
        st.markdown(f"- **Dias totais:** {num_sessoes}")
    
    if st.button("üíâ Calcular Plano de Tratamento", use_container_width=True):
        if dose_total <= 0 or taxa_dose <= 0 or num_sessoes <= 0:
            st.error("Todos os valores devem ser positivos!")
            return
            
        # C√°lculos CORRETOS conforme especificado
        dose_por_sessao = dose_total / num_sessoes
        tempo_por_sessao = dose_por_sessao / taxa_dose
        duracao_total = tempo_por_sessao * num_sessoes
        
        st.markdown("---")
        st.markdown("### üìä Plano de Tratamento")
        
        col_res1, col_res2, col_res3 = st.columns(3)
        
        with col_res1:
            st.markdown(f'<div class="result-box"><h4>üíâ Dose/sess√£o: <span style="color:#d32f2f">{dose_por_sessao:.2f} Gy</span></h4></div>', unsafe_allow_html=True)
        
        with col_res2:
            st.markdown(f'<div class="result-box"><h4>‚è±Ô∏è Tempo/sess√£o: <span style="color:#d32f2f">{tempo_por_sessao:.2f} min</span></h4></div>', unsafe_allow_html=True)
        
        with col_res3:
            st.markdown(f'<div class="info-box"><h4>üìÖ Dura√ß√£o total: <span style="color:#1976D2">{duracao_total:.1f} min</span></h4></div>', unsafe_allow_html=True)
        
        # Detalhes do c√°lculo
        st.markdown("**üîç Detalhes do C√°lculo:**")
        
        st.markdown('<div class="formula-box">Dose/sess√£o = {:.1f} Gy / {} = {:.2f} Gy</div>'.format(
            dose_total, num_sessoes, dose_por_sessao), unsafe_allow_html=True)
        
        st.markdown('<div class="formula-box">Tempo/sess√£o = {:.2f} Gy / {:.1f} Gy/min = {:.2f} min</div>'.format(
            dose_por_sessao, taxa_dose, tempo_por_sessao), unsafe_allow_html=True)
        
        # Teste com o exemplo fornecido
        st.markdown("---")
        st.markdown("### üß™ Teste de Verifica√ß√£o")
        st.markdown("**Entradas de teste (exemplo):**")
        st.markdown("- Dose prescrita: 50 Gy")
        st.markdown("- Taxa de dose: 2 Gy/min")  
        st.markdown("- N√∫mero de sess√µes: 25")
        
        dose_teste = 50 / 25  # 2 Gy
        tempo_teste = 2 / 2   # 1 min
        
        st.markdown("**Resultados esperados:**")
        st.markdown(f"- Dose por sess√£o: {dose_teste:.1f} Gy")
        st.markdown(f"- Tempo por sess√£o: {tempo_teste:.1f} min")
        
        # Verifica√ß√£o
        if abs(dose_por_sessao - dose_teste) < 0.01 and abs(tempo_por_sessao - tempo_teste) < 0.01:
            st.success("‚úÖ Teste passou! Os c√°lculos est√£o corretos.")
        else:
            st.error("‚ùå Teste falhou! Verifique os c√°lculos.")
        
        # Gr√°fico da distribui√ß√£o de sess√µes
        sessoes = list(range(1, num_sessoes + 1))
        doses_acumuladas = [dose_por_sessao * i for i in range(1, num_sessoes + 1)]
        
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))
        
        # Gr√°fico 1: Dose por sess√£o
        ax1.bar(sessoes, [dose_por_sessao] * num_sessoes, color='skyblue', edgecolor='navy')
        ax1.set_xlabel("Sess√£o")
        ax1.set_ylabel("Dose (Gy)")
        ax1.set_title("Dose por Sess√£o")
        ax1.grid(True, axis='y')
        
        # Gr√°fico 2: Dose acumulada
        ax2.plot(sessoes, doses_acumuladas, 'r-', marker='o', linewidth=2)
        ax2.set_xlabel("Sess√£o")
        ax2.set_ylabel("Dose Acumulada (Gy)")
        ax2.set_title("Dose Total Acumulada")
        ax2.grid(True)
        ax2.axhline(y=dose_total, color='g', linestyle='--', label=f'Dose total: {dose_total} Gy')
        ax2.legend()
        
        plt.tight_layout()
        st.pyplot(fig)
        
        # Tabela de tratamento
        df_tratamento = pd.DataFrame({
            "Sess√£o": sessoes,
            "Dose_Sess√£o (Gy)": [dose_por_sessao] * num_sessoes,
            "Dose_Acumulada (Gy)": doses_acumuladas,
            "Tempo_Sess√£o (min)": [tempo_por_sessao] * num_sessoes
        })
        
        st.dataframe(df_tratamento.head(10), use_container_width=True)
        
        # Download do plano
        plano = f"""PLANO DE RADIOTERAPIA
=====================
DOSE PRESCRITA TOTAL: {dose_total} Gy
TAXA DE DOSE: {taxa_dose} Gy/min
N√öMERO DE SESS√ïES: {num_sessoes}
SESS√ïES POR SEMANA: {dias_semana}

RESULTADOS:
- Dose por sess√£o: {dose_por_sessao:.2f} Gy
- Tempo por sess√£o: {tempo_por_sessao:.2f} min
- Dura√ß√£o total: {duracao_total:.1f} min
- Semanas de tratamento: {semanas:.1f}

CALEND√ÅRIO ESTIMADO:
- In√≠cio: {datetime.now().strftime('%d/%m/%Y')}
- T√©rmino: {(datetime.now() + pd.DateOffset(weeks=semanas)).strftime('%d/%m/%Y')}"""

        st.download_button("üì• Baixar Plano de Tratamento", data=plano, 
                          file_name="plano_radioterapia.txt", 
                          mime="text/plain", use_container_width=True)

# =============================================================================
# M√ìDULO 4: DISTRIBUI√á√ÉO DE DOSE
# =============================================================================

def modulo_distribuicao_dose():
    st.header("üìä Distribui√ß√£o de Dose em Tecidos")
    
    st.info("""
    **Instru√ß√µes:**
    - Selecione o tipo de radia√ß√£o e energia
    - Configure os par√¢metros de profundidade
    - Visualize a distribui√ß√£o de dose no tecido
    """)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**‚ò¢Ô∏è Tipo de Radia√ß√£o:**")
        tipo_rad = st.selectbox("Tipo", 
                              options=["Raios X", "El√©trons", "Pr√≥tons", "N√™utrons", "Raios Gama"],
                              index=0)
        
        energia = st.slider("Energia (MeV)", 
                          min_value=0.1, max_value=20.0, value=6.0, step=0.1)
        
        st.markdown("**üß™ Par√¢metros do Tecido:**")
        densidade = st.number_input("Densidade (g/cm¬≥)", 
                                  min_value=0.1, value=1.0, step=0.1)
    
    with col2:
        st.markdown("**üìè Par√¢metros de Profundidade:**")
        max_profundidade = st.slider("Profundidade m√°xima (cm)", 
                                   min_value=1.0, max_value=30.0, value=20.0, step=1.0)
        
        resolucao = st.slider("Resolu√ß√£o (pontos)", 
                            min_value=10, max_value=500, value=100, step=10)
        
        st.markdown("**üìê Modelo de Atenua√ß√£o:**")
        modelo = st.selectbox("Modelo", 
                            options=["Exponencial Simples", "Com Build-up", "Com PDD"],
                            index=0)
    
    if st.button("üìä Calcular Distribui√ß√£o de Dose", use_container_width=True):
        # Gerar dados de profundidade
        profundidades = np.linspace(0, max_profundidade, resolucao)
        
        # Modelos de distribui√ß√£o de dose baseados no tipo de radia√ß√£o
        if tipo_rad == "Raios X" or tipo_rad == "Raios Gama":
            # Para f√≥tons: pico de dose em superf√≠cie com decaimento exponencial
            if modelo == "Exponencial Simples":
                doses = 100 * np.exp(-0.1 * profundidades)
            elif modelo == "Com Build-up":
                # Pico de dose a alguns cm de profundidade
                build_up = 2.0  # cm
                doses = 100 * (profundidades/build_up) * np.exp(1 - profundidades/build_up)
            else:  # PDD (Percent Depth Dose)
                doses = 100 * np.exp(-0.08 * profundidades) * (1 + 0.5 * np.exp(-0.3 * (profundidades - 2)**2))
                
        elif tipo_rad == "El√©trons":
            # El√©trons: pico mais superficial
            r_max = 0.5 * energia  # range m√°ximo em cm
            doses = 100 * (profundidades/r_max) * np.exp(1 - profundidades/r_max)
            
        elif tipo_rad == "Pr√≥tons":
            # Pr√≥tons: pico de Bragg
            r_max = 1.0 * energia  # range em cm
            doses = 100 * np.exp(-0.05 * (profundidades - r_max)**2)
            
        else:  # N√™utrons
            # N√™utrons: decaimento exponencial
            doses = 100 * np.exp(-0.15 * profundidades)
        
        # Normalizar para dose m√°xima = 100%
        doses = doses / np.max(doses) * 100
        
        st.markdown("---")
        st.markdown("### üìà Distribui√ß√£o de Dose")
        
        # Gr√°fico principal
        fig, ax = plt.subplots(figsize=(12, 8))
        ax.plot(profundidades, doses, 'b-', linewidth=3, label=f'{tipo_rad} - {energia} MeV')
        
        # Encontrar Dmax
        idx_max = np.argmax(doses)
        dmax = doses[idx_max]
        p_dmax = profundidades[idx_max]
        
        ax.plot(p_dmax, dmax, 'ro', markersize=10, label=f'Dmax: {dmax:.1f}% @ {p_dmax:.1f}cm')
        
        # Linhas de refer√™ncia
        ax.axhline(y=50, color='orange', linestyle='--', label='50% dose')
        ax.axvline(x=p_dmax, color='red', linestyle=':', alpha=0.5)
        
        ax.set_xlabel("Profundidade (cm)")
        ax.set_ylabel("Dose Relativa (%)")
        ax.set_title(f"Distribui√ß√£o de Dose - {tipo_rad} {energia} MeV")
        ax.legend()
        ax.grid(True)
        
        # Adicionar segundo eixo para dose absoluta se especificado
        ax2 = ax.twinx()
        dose_max_abs = 2.0  # Gy por unidade (exemplo)
        ax2.set_ylabel(f"Dose Absoluta (Gy)", color='green')
        ax2.set_ylim(0, dose_max_abs)
        
        st.pyplot(fig)
        
        # Par√¢metros importantes
        st.markdown("### üìã Par√¢metros Importantes")
        
        # Encontrar R50 (profundidade onde dose = 50%)
        idx_50 = np.where(doses <= 50)[0]
        if len(idx_50) > 0:
            r50 = profundidades[idx_50[0]]
        else:
            r50 = max_profundidade
            
        # Encontrar R80 e R20
        idx_80 = np.where(doses <= 80)[0]
        r80 = profundidades[idx_80[0]] if len(idx_80) > 0 else max_profundidade
        
        idx_20 = np.where(doses <= 20)[0]
        r20 = profundidades[idx_20[0]] if len(idx_20) > 0 else max_profundidade
        
        col_params1, col_params2 = st.columns(2)
        
        with col_params1:
            st.markdown(f"**üìç Dmax:** {dmax:.1f}% @ {p_dmax:.1f} cm")
            st.markdown(f"**üìè R50:** {r50:.1f} cm (50% dose)")
            st.markdown(f"**üìê R80:** {r80:.1f} cm (80% dose)")
        
        with col_params2:
            st.markdown(f"**üìä R20:** {r20:.1f} cm (20% dose)")
            st.markdown(f"**üéØ Raz√£o R50/R80:** {r50/r80:.2f}")
            st.markdown(f"**üìà Penetra√ß√£o:** {r20:.1f} cm")
        
        # Tabela de dados
        df_dose = pd.DataFrame({
            "Profundidade (cm)": profundidades,
            "Dose_Relativa (%)": doses,
            "Dose_Absoluta (Gy)": doses/100 * dose_max_abs
        })
        
        st.dataframe(df_dose.head(10), use_container_width=True)
        
        # Download dos dados
        csv = df_dose.to_csv(index=False)
        st.download_button("üì• Baixar Dados CSV", data=csv, 
                          file_name=f"distribuicao_dose_{tipo_rad.lower()}_{energia}MeV.csv", 
                          mime="text/csv", use_container_width=True)
        
        # Informa√ß√µes adicionais
        st.markdown("### ‚ÑπÔ∏è Informa√ß√µes T√©cnicas")
        
        info_text = f"""
        **Tipo de Radia√ß√£o:** {tipo_rad}
        **Energia:** {energia} MeV
        **Densidade do Tecido:** {densidade} g/cm¬≥
        **Modelo Utilizado:** {modelo}
        
        **Caracter√≠sticas da Distribui√ß√£o:**
        - Profundidade de Dmax: {p_dmax:.2f} cm
        - Valor de Dmax: {dmax:.1f}%
        - Profundidade de 50% dose: {r50:.2f} cm
        - √çndice de penetra√ß√£o: {r20:.2f} cm
        
        **Aplica√ß√µes Cl√≠nicas:**
        - {tipo_rad} com {energia} MeV √© comumente usado para {'tratamentos superficiais' if p_dmax < 2 else 'tratamentos profundos'}
        - A distribui√ß√£o mostra {'baixa' if r20 < 5 else 'alta'} penetra√ß√£o no tecido
        """
        
        st.info(info_text)

# =============================================================================
# M√ìDULO 5: APLICA√á√ïES CL√çNICAS
# =============================================================================

def modulo_aplicacoes_clinicas():
    st.header("üè• Aplica√ß√µes Cl√≠nicas da Radia√ß√£o")
    
    st.info("""
    **Instru√ß√µes:** 
    - Selecione o tipo de aplica√ß√£o cl√≠nica
    - Configure os par√¢metros espec√≠ficos
    - Visualize os resultados e recomenda√ß√µes
    """)
    
    aplicacoes = {
        "Radioterapia Externa": "Tratamento com feixe externo de radia√ß√£o",
        "Brachytherapy": "Fontes radioativas internas",
        "Radiocirurgia": "Alta dose √∫nica precisa",
        "Terapia com Pr√≥tons": "Terapia com part√≠culas carregadas",
        "Imagem Diagn√≥stica": "Raios X, CT, PET, etc."
    }
    
    aplicacao = st.selectbox("Selecione a aplica√ß√£o cl√≠nica:", list(aplicacoes.keys()))
    
    if aplicacao == "Radioterapia Externa":
        st.markdown("### üìÖ Radioterapia Externa")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**üíä Par√¢metros do Tratamento:**")
            dose_total = st.slider("Dose total (Gy)", 10.0, 80.0, 60.0, 2.0)
            num_fracoes = st.slider("N√∫mero de fra√ß√µes", 1, 40, 30, 1)
            energia = st.selectbox("Energia (MV)", [6, 10, 15, 18])
            
        with col2:
            st.markdown("**üéØ Par√¢metros do Tumor:**")
            volume = st.slider("Volume do tumor (cm¬≥)", 1.0, 1000.0, 50.0, 10.0)
            localizacao = st.selectbox("Localiza√ß√£o", ["Pulm√£o", "Pr√≥stata", "Mama", "C√©rebro", "Outro"])
            
            # Par√¢metro BED (Biological Effective Dose)
            alpha_beta = st.slider("Raz√£o Œ±/Œ≤", 1.0, 20.0, 10.0, 1.0)
        
        if st.button("üìä Calcular Par√¢metros Cl√≠nicos"):
            dose_fracao = dose_total / num_fracoes
            BED = dose_total * (1 + dose_fracao / alpha_beta)
            
            st.markdown("---")
            st.markdown("### üìã Resultados do Tratamento")
            
            col_res1, col_res2 = st.columns(2)
            
            with col_res1:
                st.markdown(f'<div class="result-box"><h4>üíâ Dose/fra√ß√£o: <span style="color:#d32f2f">{dose_fracao:.2f} Gy</span></h4></div>', unsafe_allow_html=True)
                st.markdown(f'<div class="info-box"><h4>üìà BED: <span style="color:#1976D2">{BED:.1f} Gy</span></h4></div>', unsafe_allow_html=True)
            
            with col_res2:
                st.markdown(f'<div class="info-box"><h4>‚è±Ô∏è Dura√ß√£o: <span style="color:#1976D2">{num_fracoes/5:.1f} semanas</span></h4></div>', unsafe_allow_html=True)
                st.markdown(f'<div class="info-box"><h4>üîã Energia: <span style="color:#1976D2">{energia} MV</span></h4></div>', unsafe_allow_html=True)
            
            # Recomenda√ß√µes baseadas nos par√¢metros
            st.markdown("### üí° Recomenda√ß√µes")
            
            if dose_fracao > 3.0:
                st.warning("‚ö†Ô∏è Dose por fra√ß√£o elevada. Considerar hiperfracionamento.")
            elif dose_fracao < 1.8:
                st.info("‚ÑπÔ∏è Dose por fra√ß√£o baixa. Considerar hipofracionamento.")
            else:
                st.success("‚úÖ Dose por fra√ß√£o dentro da faixa convencional.")
            
            if BED > 100:
                st.info("‚ÑπÔ∏è BED elevado indica maior efetividade biol√≥gica.")
            
            # Gr√°fico de BED vs dose/fra√ß√£o
            fracoes_test = np.linspace(1, 40, 40)
            doses_frac_test = 60 / fracoes_test
            BED_test = 60 * (1 + doses_frac_test / alpha_beta)
            
            fig, ax = plt.subplots(figsize=(10, 6))
            ax.plot(fracoes_test, BED_test, 'b-', linewidth=2)
            ax.plot(num_fracoes, BED, 'ro', markersize=8, label=f'Plano atual: {BED:.1f} Gy')
            
            ax.set_xlabel("N√∫mero de Fra√ß√µes")
            ax.set_ylabel("BED (Gy)")
            ax.set_title("Dose Biologicamente Efetiva (BED) vs N√∫mero de Fra√ß√µes")
            ax.legend()
            ax.grid(True)
            
            st.pyplot(fig)
    
    elif aplicacao == "Brachytherapy":
        st.markdown("### üìç Brachytherapy")
        st.info("M√≥dulo em desenvolvimento. Use Radioterapia Externa para simula√ß√µes.")
        
    else:
        st.info(f"M√≥dulo {aplicacao} em desenvolvimento.")

# =============================================================================
# M√ìDULO 6: APLICA√á√ïES AMBIENTAIS
# =============================================================================

def modulo_aplicacoes_ambientais():
    st.header("üåç Aplica√ß√µes Ambientais da Radioatividade")
    
    st.info("""
    **Instru√ß√µes:** 
    - Selecione o cen√°rio ambiental
    - Configure os par√¢metros de contamina√ß√£o
    - Visualize o impacto e medidas de prote√ß√£o
    """)
    
    cenarios = {
        "Contamina√ß√£o do Solo": "An√°lise de radiois√≥topos no solo",
        "Contamina√ß√£o da √Ågua": "Monitoramento de recursos h√≠dricos", 
        "Monitoramento do Ar": "Part√≠culas radioativas no ar",
        "Acidentes Nucleares": "Simula√ß√£o de cen√°rios de acidente"
    }
    
    cenario = st.selectbox("Selecione o cen√°rio ambiental:", list(cenarios.keys()))
    
    if cenario == "Contamina√ß√£o do Solo":
        st.markdown("### üå± Contamina√ß√£o do Solo")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**‚ò¢Ô∏è Par√¢metros de Contamina√ß√£o:**")
            isotopo = st.selectbox("Radiois√≥topo", 
                                 ["Cs-137", "Sr-90", "I-131", "U-238", "Co-60"])
            atividade = st.number_input("Atividade (Bq/kg)", 
                                      min_value=0.1, value=1000.0, step=10.0)
            profundidade = st.slider("Profundidade (cm)", 1, 100, 20, 1)
            
        with col2:
            st.markdown("**üìä Par√¢metros do Solo:**")
            tipo_solo = st.selectbox("Tipo de solo", 
                                   ["Argiloso", "Arenoso", "Org√¢nico", "Misto"])
            ph = st.slider("pH do solo", 3.0, 9.0, 6.5, 0.1)
            umidade = st.slider("Umidade (%)", 0, 100, 30, 1)
        
        if st.button("üå± Analisar Contamina√ß√£o"):
            # C√°lculos simplificados
            meia_vida = {
                "Cs-137": 30.17, "Sr-90": 28.8, "I-131": 8.02, 
                "U-238": 4.468e9, "Co-60": 5.27
            }[isotopo]  # anos
            
            lambda_val = math.log(2) / (meia_vida * 365.25)  # dia‚Åª¬π
            
            # Fator de migra√ß√£o baseado no tipo de solo
            fatores_migracao = {"Argiloso": 0.1, "Arenoso": 0.3, "Org√¢nico": 0.2, "Misto": 0.15}
            taxa_migracao = fatores_migracao[tipo_solo] * (1 + umidade/100)
            
            st.markdown("---")
            st.markdown("### üìã Resultados da An√°lise")
            
            col_res1, col_res2 = st.columns(2)
            
            with col_res1:
                st.markdown(f'<div class="result-box"><h4>‚è≥ Meia-vida: <span style="color:#d32f2f">{meia_vida} anos</span></h4></div>', unsafe_allow_html=True)
                st.markdown(f'<div class="info-box"><h4>üìâ Constante Œª: <span style="color:#1976D2">{lambda_val:.3e} dia‚Åª¬π</span></h4></div>', unsafe_allow_html=True)
            
            with col_res2:
                st.markdown(f'<div class="info-box"><h4>üåä Taxa migra√ß√£o: <span style="color:#1976D2">{taxa_migracao:.3f} cm/dia</span></h4></div>', unsafe_allow_html=True)
                st.markdown(f'<div class="info-box"><h4>üìè Profundidade: <span style="color:#1976D2">{profundidade} cm</span></h4></div>', unsafe_allow_html=True)
            
            # Recomenda√ß√µes
            st.markdown("### üí° Recomenda√ß√µes de Prote√ß√£o")
            
            if atividade > 10000:
                st.error("üö® CONTAMINA√á√ÉO ELEVADA! Medidas urgentes necess√°rias.")
                st.markdown("- Isolamento da √°rea")
                st.markdown("- Remo√ß√£o de solo contaminado")
                st.markdown("- Monitoramento cont√≠nuo")
            elif atividade > 1000:
                st.warning("‚ö†Ô∏è Contamina√ß√£o moderada. Monitoramento intensivo.")
                st.markdown("- Restri√ß√£o de acesso")
                st.markdown("- Amostragem regular")
            else:
                st.success("‚úÖ Contamina√ß√£o baixa. Monitoramento de rotina.")
            
            # Simula√ß√£o temporal
            tempo_dias = np.linspace(0, min(meia_vida * 365.25 * 2, 3650), 100)
            atividade_temporal = atividade * np.exp(-lambda_val * tempo_dias)
            
            fig, ax = plt.subplots(figsize=(10, 6))
            ax.plot(tempo_dias/365.25, atividade_temporal, 'r-', linewidth=2)
            ax.axhline(y=1000, color='orange', linestyle='--', label='Limite alerta (1000 Bq/kg)')
            ax.axhline(y=100, color='green', linestyle='--', label='Limite seguro (100 Bq/kg)')
            
            ax.set_xlabel("Tempo (anos)")
            ax.set_ylabel("Atividade (Bq/kg)")
            ax.set_title(f"Decaimento do {isotopo} no Solo")
            ax.legend()
            ax.grid(True)
            ax.set_yscale('log')
            
            st.pyplot(fig)
    
    else:
        st.info(f"M√≥dulo {cenario} em desenvolvimento.")

# =============================================================================
# M√ìDULO 7: EFEITO COMPTON
# =============================================================================

def modulo_efeito_compton():
    st.header("‚ö° Efeito Compton")
    
    st.info("""
    **Instru√ß√µes:**
    - Insira a energia do f√≥ton incidente
    - Selecione o √¢ngulo de espalhamento
    - Visualize as energias e comprimentos de onda resultantes
    """)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**üìä Par√¢metros de Entrada:**")
        energia_incidente = st.number_input("Energia do f√≥ton incidente (MeV)", 
                                          min_value=0.01, value=1.0, step=0.1)
        
        angulo_graus = st.slider("√Çngulo de espalhamento (graus)", 
                                min_value=0, max_value=180, value=90, step=1)
        
        # Constantes f√≠sicas CORRETAS
        h = 4.135667662e-15  # eV¬∑s (constante de Planck)
        c = 299792458        # m/s (velocidade da luz)
        m_e = 0.5109989461   # MeV/c¬≤ (massa do el√©tron)
        
    with col2:
        st.markdown("**üìê F√≥rmula do Efeito Compton:**")
        st.markdown('<div class="formula-box">Œª\' - Œª = (h/m‚Çëc) √ó (1 - cosŒ∏)</div>', unsafe_allow_html=True)
        st.markdown('<div class="formula-box">E\' = E / [1 + (E/m‚Çëc¬≤)(1 - cosŒ∏)]</div>', unsafe_allow_html=True)
        
        st.markdown("**‚ÑπÔ∏è Constantes F√≠sicas:**")
        st.markdown(f"- h = {h:.3e} eV¬∑s")
        st.markdown(f"- c = {c:.3e} m/s")
        st.markdown(f"- m‚Çëc¬≤ = {m_e} MeV")
    
    if st.button("‚ö° Calcular Efeito Compton", use_container_width=True):
        if energia_incidente <= 0:
            st.error("A energia deve ser positiva!")
            return
            
        # Converter √¢ngulo para radianos
        angulo_rad = math.radians(angulo_graus)
        
        # C√°lculo CORRETO da energia espalhada
        denominador = 1 + (energia_incidente / m_e) * (1 - math.cos(angulo_rad))
        energia_espalhada = energia_incidente / denominador
        
        # C√°lculo do comprimento de onda
        lambda_compton = 2.426e-12  # m (comprimento de onda Compton)
        delta_lambda = lambda_compton * (1 - math.cos(angulo_rad))
        
        # Energia do el√©tron de recuo
        energia_eletron = energia_incidente - energia_espalhada
        
        st.markdown("---")
        st.markdown("### üìä Resultados do Espalhamento Compton")
        
        col_res1, col_res2, col_res3 = st.columns(3)
        
        with col_res1:
            st.markdown(f'<div class="result-box"><h4>üìâ Energia espalhada: <span style="color:#d32f2f">{energia_espalhada:.4f} MeV</span></h4></div>', unsafe_allow_html=True)
        
        with col_res2:
            st.markdown(f'<div class="result-box"><h4>‚ö° Energia el√©tron: <span style="color:#d32f2f">{energia_eletron:.4f} MeV</span></h4></div>', unsafe_allow_html=True)
        
        with col_res3:
            st.markdown(f'<div class="info-box"><h4>üìè ŒîŒª: <span style="color:#1976D2">{delta_lambda:.3e} m</span></h4></div>', unsafe_allow_html=True)
        
        # Detalhes do c√°lculo
        st.markdown("**üîç Detalhes do C√°lculo:**")
        
        st.markdown(f'- **1 - cosŒ∏:** {1 - math.cos(angulo_rad):.4f}')
        st.markdown(f'- **E/m‚Çëc¬≤:** {energia_incidente/m_e:.4f}')
        st.markdown(f'- **(E/m‚Çëc¬≤)(1 - cosŒ∏):** {(energia_incidente/m_e) * (1 - math.cos(angulo_rad)):.4f}')
        st.markdown(f'- **Denominador:** {denominador:.4f}')
        st.markdown(f'- **E\' = E / denominador:** {energia_incidente/denominador:.4f} MeV')
        
        # Gr√°fico da energia espalhada vs √¢ngulo
        angulos = np.linspace(0, 180, 181)
        angulos_rad = np.radians(angulos)
        energias_esp = energia_incidente / (1 + (energia_incidente/m_e) * (1 - np.cos(angulos_rad)))
        
        fig, ax = plt.subplots(figsize=(10, 6))
        ax.plot(angulos, energias_esp, 'b-', linewidth=3)
        ax.plot(angulo_graus, energia_espalhada, 'ro', markersize=8, 
               label=f'√Çngulo selecionado: {angulo_graus}¬∞')
        
        ax.set_xlabel("√Çngulo de Espalhamento (graus)")
        ax.set_ylabel("Energia do F√≥ton Espalhado (MeV)")
        ax.set_title(f"Efeito Compton - F√≥ton Incidente de {energia_incidente} MeV")
        ax.legend()
        ax.grid(True)
        
        st.pyplot(fig)
        
        # Tabela de valores
        df_compton = pd.DataFrame({
            "√Çngulo (graus)": angulos,
            "Energia_Espalhada (MeV)": energias_esp,
            "Energia_El√©tron (MeV)": energia_incidente - energias_esp
        })
        
        st.dataframe(df_compton.head(10), use_container_width=True)
        
        # Download
        csv = df_compton.to_csv(index=False)
        st.download_button("üì• Baixar Dados Compton", data=csv, 
                          file_name=f"compton_{energia_incidente}MeV.csv", 
                          mime="text/csv", use_container_width=True)
        
        # Verifica√ß√£o com caso conhecido
        if abs(angulo_graus - 90) < 1 and abs(energia_incidente - 1.0) < 0.01:
            st.markdown("### üß™ Verifica√ß√£o com Caso Conhecido")
            st.markdown("Para E = 1 MeV e Œ∏ = 90¬∞:")
            st.markdown("- E' esperado ‚âà 0.338 MeV")
            st.markdown(f"- E' calculado = {energia_espalhada:.3f} MeV")
            
            if abs(energia_espalhada - 0.338) < 0.01:
                st.success("‚úÖ C√°lculo verificado!")
            else:
                st.warning("‚ö†Ô∏è Pequena diferen√ßa nos valores. Verifique as constantes.")

# =============================================================================
# M√ìDULO 8: PRODU√á√ÉO DE PARES
# =============================================================================

def modulo_producao_pares():
    st.header("‚öõÔ∏è Produ√ß√£o de Pares")
    
    st.info("""
    **Instru√ß√µes:**
    - Insira a energia do f√≥ton incidente
    - Selecione o material alvo
    - Visualize a probabilidade de produ√ß√£o de pares
    """)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**üìä Par√¢metros de Entrada:**")
        energia_incidente = st.number_input("Energia do f√≥ton (MeV)", 
                                          min_value=1.022, value=5.0, step=0.1,
                                          help="M√≠nimo: 1.022 MeV (2√óm‚Çëc¬≤)")
        
        material = st.selectbox("Material", 
                              ["Chumbo", "Alum√≠nio", "√Ågua", "Concreto", "Tungst√™nio"])
        
        espessura = st.slider("Espessura (cm)", 0.1, 10.0, 1.0, 0.1)
    
    with col2:
        st.markdown("**üìê F√≠sica da Produ√ß√£o de Pares:**")
        st.markdown('<div class="formula-box">E_min = 2 √ó m‚Çëc¬≤ = 1.022 MeV</div>', unsafe_allow_html=True)
        st.markdown('<div class="formula-box">œÉ_par ‚àù Z¬≤ √ó (E - 1.022)</div>', unsafe_allow_html=True)
        
        st.markdown("**‚ÑπÔ∏è N√∫meros At√¥micos:**")
        numeros_z = {"Chumbo": 82, "Alum√≠nio": 13, "√Ågua": 7.5, "Concreto": 11, "Tungst√™nio": 74}
        Z = numeros_z[material]
        st.markdown(f"- **{material}:** Z = {Z}")
    
    if st.button("‚öõÔ∏è Calcular Produ√ß√£o de Pares", use_container_width=True):
        if energia_incidente < 1.022:
            st.error("A energia deve ser ‚â• 1.022 MeV para produ√ß√£o de pares!")
            return
            
        # C√°lculo simplificado da se√ß√£o de choque
        # Coeficiente de atenua√ß√£o para produ√ß√£o de pares (aproximado)
        k_par = 0.001 * (Z ** 2) * (energia_incidente - 1.022)
        
        # Probabilidade de intera√ß√£o
        probabilidade = 1 - math.exp(-k_par * espessura)
        
        st.markdown("---")
        st.markdown("### üìä Resultados da Produ√ß√£o de Pares")
        
        col_res1, col_res2 = st.columns(2)
        
        with col_res1:
            st.markdown(f'<div class="result-box"><h4>üìà Coeficiente Œº_par: <span style="color:#d32f2f">{k_par:.4f} cm‚Åª¬π</span></h4></div>', unsafe_allow_html=True)
        
        with col_res2:
            st.markdown(f'<div class="result-box"><h4>üéØ Probabilidade: <span style="color:#d32f2f">{probabilidade*100:.2f}%</span></h4></div>', unsafe_allow_html=True)
        
        # Energia dos el√©trons e p√≥sitrons
        energia_restante = energia_incidente - 1.022
        energia_cinetica = energia_restante / 2  # Aproximadamente igual para el√©tron e p√≥sitron
        
        st.markdown("**‚ö° Energias das Part√≠culas:**")
        st.markdown(f"- **Energia cin√©tica total dispon√≠vel:** {energia_restante:.3f} MeV")
        st.markdown(f"- **Energia cin√©tica do el√©tron:** ~{energia_cinetica:.3f} MeV")
        st.markdown(f"- **Energia cin√©tica do p√≥sitron:** ~{energia_cinetica:.3f} MeV")
        
        # Gr√°fico da probabilidade vs energia
        energias = np.linspace(1.022, 10.0, 100)
        k_par_vals = 0.001 * (Z ** 2) * (energias - 1.022)
        prob_vals = 1 - np.exp(-k_par_vals * espessura)
        
        fig, ax = plt.subplots(figsize=(10, 6))
        ax.plot(energias, prob_vals * 100, 'purple', linewidth=3)
        ax.plot(energia_incidente, probabilidade * 100, 'ro', markersize=8, 
               label=f'Energia selecionada: {energia_incidente} MeV')
        
        ax.set_xlabel("Energia do F√≥ton (MeV)")
        ax.set_ylabel("Probabilidade de Produ√ß√£o de Pares (%)")
        ax.set_title(f"Produ√ß√£o de Pares em {material} (Z={Z}) - {espessura} cm")
        ax.legend()
        ax.grid(True)
        
        st.pyplot(fig)
        
        # Compara√ß√£o entre materiais
        st.markdown("### üìä Compara√ß√£o entre Materiais")
        
        comparacao = []
        for mat, z_val in numeros_z.items():
            k_val = 0.001 * (z_val ** 2) * (energia_incidente - 1.022)
            prob_val = 1 - math.exp(-k_val * espessura)
            comparacao.append({
                "Material": mat,
                "Z": z_val,
                "Œº_par (cm‚Åª¬π)": k_val,
                "Probabilidade (%)": prob_val * 100
            })
        
        df_comp = pd.DataFrame(comparacao)
        st.dataframe(df_comp.style.format({
            "Œº_par (cm‚Åª¬π)": "{:.4f}",
            "Probabilidade (%)": "{:.2f}"
        }), use_container_width=True)

# =============================================================================
# M√ìDULO 9: EXPOSI√á√ÉO OCUPACIONAL
# =============================================================================

def modulo_exposicao_ocupacional():
    st.header("üë®‚Äç‚öïÔ∏è C√°lculo de Exposi√ß√£o Ocupacional")
    
    st.info("""
    **Instru√ß√µes:**
    - Insira as taxas de dose e tempos de exposi√ß√£o
    - Configure os fatores de prote√ß√£o
    - Calcule a dose total e compare com limites
    """)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**üìä Par√¢metros de Exposi√ß√£o:**")
        taxa_dose = st.number_input("Taxa de dose (¬µSv/h)", 
                                  min_value=0.1, value=100.0, step=10.0)
        
        horas_dia = st.number_input("Horas por dia", 
                                  min_value=0.1, max_value=24.0, value=8.0, step=0.5)
        
        dias_semana = st.number_input("Dias por semana", 
                                    min_value=1, max_value=7, value=5, step=1)
        
        semanas_ano = st.number_input("Semanas por ano", 
                                    min_value=1, max_value=52, value=48, step=1)
    
    with col2:
        st.markdown("**üõ°Ô∏è Fatores de Prote√ß√£o:**")
        fator_protecao = st.slider("Fator de prote√ß√£o", 1.0, 100.0, 10.0, 1.0,
                                 help="Redu√ß√£o na dose devido a blindagem/EPI")
        
        distancia = st.slider("Dist√¢ncia (metros)", 0.1, 10.0, 2.0, 0.1,
                            help="Dist√¢ncia da fonte")
        
        st.markdown("**üìè Limites Anuais:**")
        limite_anual = st.selectbox("Limite de dose anual", 
                                  ["20 mSv (ocupacional)", "1 mSv (p√∫blico)", "50 mSv (emerg√™ncia)"],
                                  index=0)
    
    if st.button("üë®‚Äç‚öïÔ∏è Calcular Exposi√ß√£o", use_container_width=True):
        # Converter limite para ¬µSv
        limites = {
            "20 mSv (ocupacional)": 20000,
            "1 mSv (p√∫blico)": 1000, 
            "50 mSv (emerg√™ncia)": 50000
        }
        limite = limites[limite_anual]
        
        # C√°lculos CORRETOS
        horas_ano = horas_dia * dias_semana * semanas_ano
        dose_bruta_anual = taxa_dose * horas_ano
        
        # Ajustes por prote√ß√£o e dist√¢ncia
        dose_efetiva = dose_bruta_anual / fator_protecao
        dose_efetiva = dose_efetiva / (distancia ** 2)  # Lei do inverso do quadrado
        
        percentual_limite = (dose_efetiva / limite) * 100
        
        st.markdown("---")
        st.markdown("### üìä Resultados da Exposi√ß√£o")
        
        col_res1, col_res2, col_res3 = st.columns(3)
        
        with col_res1:
            st.markdown(f'<div class="result-box"><h4>üìà Dose bruta anual: <span style="color:#d32f2f">{dose_bruta_anual:,.0f} ¬µSv</span></h4></div>', unsafe_allow_html=True)
        
        with col_res2:
            st.markdown(f'<div class="result-box"><h4>üõ°Ô∏è Dose efetiva: <span style="color:#d32f2f">{dose_efetiva:,.0f} ¬µSv</span></h4></div>', unsafe_allow_html=True)
        
        with col_res3:
            cor = "green" if percentual_limite < 80 else "orange" if percentual_limite < 100 else "red"
            st.markdown(f'<div class="result-box"><h4>üìä % do limite: <span style="color:{cor}">{percentual_limite:.1f}%</span></h4></div>', unsafe_allow_html=True)
        
        # Avalia√ß√£o de risco
        st.markdown("### üìã Avalia√ß√£o de Risco")
        
        if percentual_limite < 50:
            st.success("‚úÖ EXPOSI√á√ÉO BAIXA. Dentro dos limites de seguran√ßa.")
            st.markdown("- Monitoramento de rotina")
            st.markdown("- Manuten√ß√£o dos procedimentos atuais")
            
        elif percentual_limite < 100:
            st.warning("‚ö†Ô∏è EXPOSI√á√ÉO MODERADA. Aten√ß√£o necess√°ria.")
            st.markdown("- Revis√£o de procedimentos")
            st.markdown("- Otimiza√ß√£o de tempos de exposi√ß√£o")
            st.markdown("- Verifica√ß√£o de EPIs")
            
        else:
            st.error("üö® EXPOSI√á√ÉO ELEVADA! Medidas corretivas urgentes.")
            st.markdown("- Paralisa√ß√£o das atividades")
            st.markdown("- Investiga√ß√£o imediata")
            st.markdown("- Revis√£o completa da prote√ß√£o radiol√≥gica")
        
        # Detalhes do c√°lculo
        st.markdown("**üîç Detalhes do C√°lculo:**")
        
        col_det1, col_det2 = st.columns(2)
        
        with col_det1:
            st.markdown(f"- **Horas anuais:** {horas_ano:.1f} h")
            st.markdown(f"- **Taxa de dose:** {taxa_dose} ¬µSv/h")
            st.markdown(f"- **Dose bruta:** {taxa_dose} √ó {horas_ano:.1f} = {dose_bruta_anual:,.0f} ¬µSv")
        
        with col_det2:
            st.markdown(f"- **Fator prote√ß√£o:** {fator_protecao}")
            st.markdown(f"- **Dist√¢ncia:** {distancia} m (fator: {1/(distancia**2):.3f})")
            st.markdown(f"- **Dose efetiva:** {dose_bruta_anual:,.0f} / {fator_protecao} / {distancia**2:.2f} = {dose_efetiva:,.0f} ¬µSv")
        
        # Gr√°fico de acumula√ß√£o de dose
        semanas = list(range(1, semanas_ano + 1))
        dose_acumulada = []
        for semana in semanas:
            horas_semana = horas_dia * dias_semana
            dose_semana = (taxa_dose * horas_semana) / fator_protecao / (distancia ** 2)
            dose_acumulada.append(dose_semana * semana)
        
        fig, ax = plt.subplots(figsize=(10, 6))
        ax.plot(semanas, dose_acumulada, 'b-', linewidth=2, label='Dose acumulada')
        ax.axhline(y=limite, color='r', linestyle='--', label=f'Limite anual: {limite/1000:.0f} mSv')
        ax.axhline(y=limite*0.8, color='orange', linestyle=':', label='80% do limite')
        
        ax.set_xlabel("Semana")
        ax.set_ylabel("Dose Acumulada (¬µSv)")
        ax.set_title("Acumula√ß√£o de Dose Ocupacional Anual")
        ax.legend()
        ax.grid(True)
        
        st.pyplot(fig)
        
        # Relat√≥rio
        relatorio = f"""RELAT√ìRIO DE EXPOSI√á√ÉO OCUPACIONAL
===============================
DATA: {datetime.now().strftime('%d/%m/%Y')}

PAR√ÇMETROS:
- Taxa de dose: {taxa_dose} ¬µSv/h
- Horas/dia: {horas_dia}
- Dias/semana: {dias_semana}
- Semanas/ano: {semanas_ano}
- Fator prote√ß√£o: {fator_protecao}
- Dist√¢ncia: {distancia} m
- Limite anual: {limite_anual}

RESULTADOS:
- Horas anuais: {horas_ano:.1f} h
- Dose bruta anual: {dose_bruta_anual:,.0f} ¬µSv
- Dose efetiva anual: {dose_efetiva:,.0f} ¬µSv
- Percentual do limite: {percentual_limite:.1f}%

AVALIA√á√ÉO: {'BAIXA' if percentual_limite < 50 else 'MODERADA' if percentual_limite < 100 else 'ELEVADA'}

RECOMENDA√á√ïES:
{'‚úÖ Dentro dos limites de seguran√ßa' if percentual_limite < 50 else '‚ö†Ô∏è Aten√ß√£o necess√°ria' if percentual_limite < 100 else 'üö® Medidas corretivas urgentes'}"""

        st.download_button("üì• Baixar Relat√≥rio", data=relatorio, 
                          file_name="exposicao_ocupacional.txt", 
                          mime="text/plain", use_container_width=True)

# =============================================================================
# M√ìDULO 10: CEN√ÅRIOS HIST√ìRICOS
# =============================================================================

def modulo_cenarios_historicos():
    st.header("üìú Simula√ß√£o de Cen√°rios Hist√≥ricos")
    
    st.info("""
    **Instru√ß√µes:**
    - Selecione um evento hist√≥rico significativo
    - Configure os par√¢metros de simula√ß√£o
    - Visualize os impactos radiol√≥gicos
    """)
    
    eventos = {
        "Chernobyl (1986)": "Acidente nuclear de Chernobyl",
        "Fukushima (2011)": "Acidente nuclear de Fukushima",
        "Goi√¢nia (1987)": "Acidente com c√©sio-137 em Goi√¢nia",
        "Three Mile Island (1979)": "Acidente nuclear nos EUA",
        "Testes Nucleares": "Testes atmosf√©ricos de armas nucleares"
    }
    
    evento = st.selectbox("Selecione o evento hist√≥rico:", list(eventos.keys()))
    
    if evento == "Chernobyl (1986)":
        st.markdown("### ‚ò¢Ô∏è Acidente de Chernobyl (1986)")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**üìä Par√¢metros do Acidente:**")
            liberacao = st.slider("Libera√ß√£o estimada (PBq)", 
                                1000, 10000, 5200, 100,
                                help="Atividade total liberada (1 PBq = 10¬π‚Åµ Bq)")
            
            distancia = st.slider("Dist√¢ncia do reator (km)", 
                                1, 1000, 30, 1)
            
            tempo_exposicao = st.slider("Tempo de exposi√ß√£o (horas)", 
                                      1, 720, 24, 1)
        
        with col2:
            st.markdown("**üìã Is√≥topos Principais:**")
            st.markdown("- **I-131:** 8.02 dias meia-vida (tiroide)")
            st.markdown("- **Cs-137:** 30.17 anos meia-vida (corpo inteiro)")
            st.markdown("- **Sr-90:** 28.8 anos meia-vida (ossos)")
            st.markdown("- **Pu-239:** 24,100 anos meia-vida (pulm√µes)")
            
            st.markdown("**üõ°Ô∏è Fatores de Prote√ß√£o:**")
            abrigo = st.slider("Fator de prote√ß√£o do abrigo", 1.0, 100.0, 10.0, 1.0)
            evacua√ß√£o = st.selectbox("Tempo de evacua√ß√£o", 
                                   ["Imediata", "1 dia", "3 dias", "1 semana", "Nenhuma"],
                                   index=0)
        
        if st.button("üìä Simular Impacto de Chernobyl"):
            # C√°lculos simplificados
            # Dose aproximada usando modelo de nuvem radioativa
            dose_1h = (liberacao * 1000) / (distancia ** 2)  # ¬µSv/h a 1 km
            dose_total = dose_1h * tempo_exposicao / abrigo
            
            # Redu√ß√£o por evacua√ß√£o
            fatores_evac = {
                "Imediata": 0.1, "1 dia": 0.3, "3 dias": 0.6, 
                "1 semana": 0.8, "Nenhuma": 1.0
            }
            dose_total *= fatores_evac[evacua√ß√£o]
            
            st.markdown("---")
            st.markdown("### üìä Resultados da Simula√ß√£o")
            
            col_res1, col_res2 = st.columns(2)
            
            with col_res1:
                st.markdown(f'<div class="result-box"><h4>üìà Dose estimada: <span style="color:#d32f2f">{dose_total:,.0f} ¬µSv</span></h4></div>', unsafe_allow_html=True)
                st.markdown(f'<div class="info-box"><h4>üìè Equivalente: <span style="color:#1976D2">{dose_total/1000:.1f} mSv</span></h4></div>', unsafe_allow_html=True)
            
            with col_res2:
                # Compara√ß√£o com limites
                if dose_total < 1000:
                    risco = "Muito baixo"
                    cor = "green"
                elif dose_total < 10000:
                    risco = "Baixo"
                    cor = "orange"
                elif dose_total < 50000:
                    risco = "Moderado" 
                    cor = "red"
                else:
                    risco = "Alto"
                    cor = "darkred"
                
                st.markdown(f'<div class="warning-box"><h4>‚ö†Ô∏è N√≠vel de risco: <span style="color:{cor}">{risco}</span></h4></div>', unsafe_allow_html=True)
            
            # Efeitos na sa√∫de
            st.markdown("### üë®‚Äç‚öïÔ∏è Poss√≠veis Efeitos na Sa√∫de")
            
            if dose_total < 100000:  # < 100 mSv
                st.success("‚úÖ **Baixo risco** - Sem efeitos agudos. Risco de c√¢ncer ligeiramente aumentado.")
                st.markdown("- Nenhum efeito imediato na sa√∫de")
                st.markdown("- Risco estat√≠stico de c√¢ncer muito baixo")
                st.markdown("- Monitoramento m√©dico recomendado")
                
            elif dose_total < 1000000:  # < 1 Sv
                st.warning("‚ö†Ô∏è **Risco moderado** - Poss√≠veis efeitos tardios.")
                st.markdown("- N√°usea leve em indiv√≠duos sens√≠veis")
                st.markdown("- Risco aumentado de c√¢ncer a longo prazo")
                st.markdown("- Acompanhamento m√©dico necess√°rio")
                
            else:  # > 1 Sv
                st.error("üö® **Alto risco** - Efeitos agudos prov√°veis.")
                st.markdown("- S√≠ndrome aguda de radia√ß√£o")
                st.markdown("- Danos aos √≥rg√£os hematopoi√©ticos")
                st.markdown("- Tratamento m√©dico imediato necess√°rio")
            
            # Mapa de contamina√ß√£o simulado
            distancias = np.linspace(1, 300, 100)
            doses_map = (liberacao * 1000) / (distancias ** 2) * 24 / abrigo
            
            fig, ax = plt.subplots(figsize=(10, 6))
            ax.plot(distancias, doses_map/1000, 'r-', linewidth=2)  # Convertendo para mSv
            ax.axvline(x=30, color='blue', linestyle='--', label='Zona de exclus√£o (30 km)')
            ax.axhline(y=20, color='green', linestyle='--', label='Limite ocupacional anual (20 mSv)')
            ax.axhline(y=1, color='orange', linestyle='--', label='Limite p√∫blico anual (1 mSv)')
            
            ax.set_xlabel("Dist√¢ncia do Reator (km)")
            ax.set_ylabel("Dose em 24h (mSv)")
            ax.set_title("Perfil de Dose - Acidente de Chernobyl")
            ax.legend()
            ax.grid(True)
            ax.set_yscale('log')
            
            st.pyplot(fig)
            
            # Informa√ß√µes hist√≥ricas
            st.markdown("### üìú Informa√ß√µes Hist√≥ricas")
            st.markdown("""
            **O acidente de Chernobyl (26/04/1986):**
            - Libera√ß√£o estimada: 5,200 PBq de material radioativo
            - √Årea evacuada: 30 km ao redor do reator
            - Trabalhadores de emerg√™ncia receberam doses de 0.2-16 Sv
            - Popula√ß√£o pr√≥xima: doses de 10-500 mSv
            """)
    
    else:
        st.info(f"Simula√ß√£o do evento {evento} em desenvolvimento.")

# =============================================================================
# M√ìDULO 11: DECAIMENTO RADIOATIVO
# =============================================================================

def modulo_decaimento_radioativo():
    st.header("üìâ Simula√ß√£o de Decaimento Radioativo")
    
    st.info("""
    **Instru√ß√µes:**
    - Selecione o radiois√≥topo ou defina par√¢metros personalizados
    - Configure as condi√ß√µes iniciais
    - Visualize a curva de decaimento
    """)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**‚ò¢Ô∏è Sele√ß√£o do Radiois√≥topo:**")
        isotopos = {
            "Carbono-14": 5730,
            "Pot√°ssio-40": 1.25e9,
            "Ur√¢nio-238": 4.468e9,
            "Iodo-131": 8.02/365.25,  # Convertendo dias para anos
            "C√©sio-137": 30.17,
            "Personalizado": 0
        }
        
        isotopo = st.selectbox("Is√≥topo", list(isotopos.keys()))
        
        if isotopo == "Personalizado":
            meia_vida = st.number_input("Meia-vida (anos)", 
                                      min_value=0.001, value=1.0, step=0.1)
        else:
            meia_vida = isotopos[isotopo]
            st.markdown(f"**Meia-vida:** {meia_vida} anos")
        
        atividade_inicial = st.number_input("Atividade inicial (Bq)", 
                                          min_value=1.0, value=1000.0, step=100.0)
    
    with col2:
        st.markdown("**üìä Par√¢metros de Simula√ß√£o:**")
        tempo_max = st.slider("Tempo m√°ximo de simula√ß√£o", 
                            1.0, 10.0, 5.0, 0.1,
                            help="Em m√∫ltiplos da meia-vida")
        
        pontos = st.slider("N√∫mero de pontos", 10, 1000, 100, 10)
        
        st.markdown("**üìê Lei do Decaimento Radioativo:**")
        st.markdown('<div class="formula-box">N(t) = N‚ÇÄ √ó e^(-Œªt)</div>', unsafe_allow_html=True)
        st.markdown('<div class="formula-box">Œª = ln(2) / T¬Ω</div>', unsafe_allow_html=True)
        st.markdown('<div class="formula-box">A(t) = Œª √ó N(t)</div>', unsafe_allow_html=True)
    
    if st.button("üìâ Simular Decaimento", use_container_width=True):
        if meia_vida <= 0 or atividade_inicial <= 0:
            st.error("Valores devem ser positivos!")
            return
            
        # C√°lculos
        lambda_val = math.log(2) / meia_vida
        tempo_simulacao = tempo_max * meia_vida
        tempos = np.linspace(0, tempo_simulacao, pontos)
        
        # N√∫mero de √°tomos inicial (N0 = A0 / Œª)
        N0 = atividade_inicial / lambda_val
        atoms = N0 * np.exp(-lambda_val * tempos)
        atividade = lambda_val * atoms
        
        st.markdown("---")
        st.markdown("### üìä Resultados do Decaimento")
        
        col_res1, col_res2, col_res3 = st.columns(3)
        
        with col_res1:
            st.markdown(f'<div class="result-box"><h4>üìâ Constante Œª: <span style="color:#d32f2f">{lambda_val:.3e} ano‚Åª¬π</span></h4></div>', unsafe_allow_html=True)
        
        with col_res2:
            st.markdown(f'<div class="result-box"><h4>üßÆ √Åtomos iniciais: <span style="color:#d32f2f">{N0:.3e}</span></h4></div>', unsafe_allow_html=True)
        
        with col_res3:
            vida_media = 1 / lambda_val
            st.markdown(f'<div class="info-box"><h4>‚è±Ô∏è Vida m√©dia: <span style="color:#1976D2">{vida_media:.3e} anos</span></h4></div>', unsafe_allow_html=True)
        
        # Gr√°ficos
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))
        
        # Gr√°fico 1: Linear
        ax1.plot(tempos/meia_vida, atividade, 'b-', linewidth=2)
        ax1.set_xlabel("Tempo (T¬Ω)")
        ax1.set_ylabel("Atividade (Bq)")
        ax1.set_title(f"Decaimento do {isotopo} - Escala Linear")
        ax1.grid(True)
        
        # Gr√°fico 2: Logar√≠tmico
        ax2.plot(tempos/meia_vida, atividade, 'r-', linewidth=2)
        ax2.set_yscale('log')
        ax2.set_xlabel("Tempo (T¬Ω)")
        ax2.set_ylabel("Atividade (Bq)")
        ax2.set_title(f"Decaimento do {isotopo} - Escala Logar√≠tmica")
        ax2.grid(True, which="both")
        
        # Adicionar linhas de meia-vida
        for ax in [ax1, ax2]:
            for i in range(1, int(tempo_max) + 1):
                ax.axvline(x=i, color='gray', linestyle='--', alpha=0.5)
                ax.text(i, ax.get_ylim()[1]*0.9, f'{i}T¬Ω', ha='center', va='top')
        
        plt.tight_layout()
        st.pyplot(fig)
        
        # Tabela de valores importantes
        st.markdown("### üìã Valores em M√∫ltiplos da Meia-vida")
        
        dados_tabela = []
        for i in range(0, int(tempo_max) + 1):
            t = i * meia_vida
            atv = atividade_inicial * (0.5 ** i)
            percentual = 100 * (0.5 ** i)
            dados_tabela.append({
                "T¬Ω": i,
                "Tempo (anos)": t,
                "Atividade (Bq)": atv,
                "Percentual (%)": percentual
            })
        
        df_tabela = pd.DataFrame(dados_tabela)
        st.dataframe(df_tabela.style.format({
            "Tempo (anos)": "{:.2e}",
            "Atividade (Bq)": "{:.2f}",
            "Percentual (%)": "{:.4f}"
        }), use_container_width=True)
        
        # Dados completos para download
        df_completo = pd.DataFrame({
            "Tempo (anos)": tempos,
            "Tempo (T¬Ω)": tempos/meia_vida,
            "Atividade (Bq)": atividade,
            "√Åtomos": atoms
        })
        
        csv = df_completo.to_csv(index=False)
        st.download_button("üì• Baixar Dados do Decaimento", data=csv, 
                          file_name=f"decaimento_{isotopo.lower()}.csv", 
                          mime="text/csv", use_container_width=True)
        
        # Verifica√ß√£o da lei do decaimento
        st.markdown("### üß™ Verifica√ß√£o da Lei do Decaimento")
        st.markdown("Para t = T¬Ω (1 meia-vida):")
        st.markdown(f"- Atividade esperada: {atividade_inicial/2:.2f} Bq")
        st.markdown(f"- Atividade calculada: {atividade[pontos//int(tempo_max)]:.2f} Bq")
        
        if abs(atividade[pontos//int(tempo_max)] - atividade_inicial/2) < 0.01:
            st.success("‚úÖ Lei do decaimento verificada!")
        else:
            st.warning("‚ö†Ô∏è Pequena diferen√ßa nos valores. Verifique o c√°lculo.")

# =============================================================================
# M√ìDULO 12: MODO EXPLICATIVO
# =============================================================================

def modulo_explicativo():
    st.header("üìö Modo Explicativo - Conceitos Radiol√≥gicos")
    
    st.info("""
    **Instru√ß√µes:** 
    - Selecione o conceito que deseja aprender
    - Explore as explica√ß√µes detalhadas e exemplos
    - Use os visualizadores interativos
    """)
    
    conceitos = {
        "Lei do Decaimento Radioativo": "decay_law",
        "Meia-vida": "half_life", 
        "Atenua√ß√£o de Radia√ß√£o": "attenuation",
        "Efeito Compton": "compton_effect",
        "Produ√ß√£o de Pares": "pair_production",
        "Dose Absorvida vs Dose Efetiva": "dose_types",
        "Prote√ß√£o Radiol√≥gica": "radiation_protection"
    }
    
    conceito = st.selectbox("Selecione o conceito:", list(conceitos.keys()))
    
    if conceito == "Lei do Decaimento Radioativo":
        st.markdown("### ‚öõÔ∏è Lei do Decaimento Radioativo")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("""
            **üìñ Defini√ß√£o:**
            A lei do decaimento radioativo descreve como o n√∫mero de √°tomos 
            radioativos diminui com o tempo de forma exponencial.
            
            **üìê F√≥rmula Matem√°tica:**
            N(t) = N‚ÇÄ √ó e^(-Œªt)
            
            Onde:
            - N(t) = n√∫mero de √°tomos no tempo t
            - N‚ÇÄ = n√∫mero inicial de √°tomos  
            - Œª = constante de decaimento
            - t = tempo decorrido
            
            **üîç Rela√ß√£o com a meia-vida:**
            Œª = ln(2) / T¬Ω
            T¬Ω = ln(2) / Œª
            """)
        
        with col2:
            st.markdown("""
            **üéØ Significado F√≠sico:**
            - Cada n√∫cleo radioativo tem uma probabilidade constante de decair
            - O decaimento √© um processo estat√≠stico
            - N√£o podemos prever quando um √°tomo espec√≠fico decair√°
            - Podemos prever o comportamento de um grande n√∫mero de √°tomos
            
            **üìä Aplica√ß√µes:**
            - Data√ß√£o radiom√©trica
            - Medicina nuclear
            - Prote√ß√£o radiol√≥gica
            - Ger√™ncia de rejeitos radioativos
            """)
        
        # Visualizador interativo
        st.markdown("---")
        st.markdown("### üéÆ Visualizador Interativo")
        
        col_viz1, col_viz2 = st.columns(2)
        
        with col_viz1:
            N0_viz = st.slider("N√∫mero inicial de √°tomos", 100, 10000, 1000, 100)
            T12_viz = st.slider("Meia-vida (unidades de tempo)", 1.0, 10.0, 2.0, 0.1)
        
        with col_viz2:
            tempo_max_viz = st.slider("Tempo m√°ximo (unidades)", 1.0, 20.0, 10.0, 0.5)
            pontos_viz = st.slider("Pontos no gr√°fico", 10, 500, 100, 10)
        
        # Calcular curva
        lambda_viz = math.log(2) / T12_viz
        tempos_viz = np.linspace(0, tempo_max_viz, pontos_viz)
        atoms_viz = N0_viz * np.exp(-lambda_viz * tempos_viz)
        
        fig, ax = plt.subplots(figsize=(10, 6))
        ax.plot(tempos_viz, atoms_viz, 'b-', linewidth=2)
        
        # Adicionar linhas de meia-vida
        for i in range(1, int(tempo_max_viz/T12_viz) + 1):
            t_meia = i * T12_viz
            ax.axvline(x=t_meia, color='red', linestyle='--', alpha=0.7)
            ax.text(t_meia, N0_viz*0.9, f'{i}T¬Ω', ha='center', va='top', color='red')
        
        ax.set_xlabel("Tempo")
        ax.set_ylabel("N√∫mero de √Åtomos")
        ax.set_title("Lei do Decaimento Radioativo - Visualiza√ß√£o")
        ax.grid(True)
        
        st.pyplot(fig)
        
        # Tabela de valores
        st.markdown("### üìã Valores em M√∫ltiplos da Meia-vida")
        
        dados = []
        for i in range(0, int(tempo_max_viz/T12_viz) + 1):
            t = i * T12_viz
            n = N0_viz * (0.5 ** i)
            percent = 100 * (0.5 ** i)
            dados.append({"T¬Ω": i, "Tempo": t, "√Åtomos": n, "Percentual": percent})
        
        df_viz = pd.DataFrame(dados)
        st.dataframe(df_viz.style.format({
            "Tempo": "{:.2f}",
            "√Åtomos": "{:.0f}",
            "Percentual": "{:.2f}%"
        }), use_container_width=True)
    
    elif conceito == "Meia-vida":
        st.markdown("### ‚è±Ô∏è Conceito de Meia-vida")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("""
            **üìñ Defini√ß√£o:**
            A meia-vida (T¬Ω) √© o tempo necess√°rio para que metade dos √°tomos 
            radioativos em uma amostra sofra decaimento.
            
            **üéØ Caracter√≠sticas:**
            - √â uma propriedade intr√≠nseca de cada radiois√≥topo
            - N√£o depende da quantidade inicial do material
            - Pode variar de fra√ß√µes de segundo a bilh√µes de anos
            
            **üìê Rela√ß√£o Matem√°tica:**
            T¬Ω = ln(2) / Œª
            Onde Œª √© a constante de decaimento
            """)
        
        with col2:
            st.markdown("""
            **üîç Exemplos de Meia-vida:**
            - Carbono-14: 5,730 anos
            - Iodo-131: 8.02 dias  
            - C√©sio-137: 30.17 anos
            - Ur√¢nio-238: 4.47 bilh√µes de anos
            - Tecn√©cio-99m: 6 horas
            
            **üìä Import√¢ncia:**
            - Determina tempo de armazenamento de rejeitos
            - Define frequ√™ncia de calibra√ß√£o de fontes
            - Influencia escolha de radiof√°rmacos
            - Afeta estrat√©gias de prote√ß√£o radiol√≥gica
            """)
        
        # Comparador de meias-vidas
        st.markdown("---")
        st.markdown("### üìä Comparador de Meias-vida")
        
        isotopos_compare = {
            "Tecn√©cio-99m": 6/24/365.25,  # 6 horas em anos
            "Iodo-131": 8.02/365.25,      # 8.02 dias em anos
            "Carbono-14": 5730,
            "C√©sio-137": 30.17,
            "Pot√°ssio-40": 1.25e9,
            "Ur√¢nio-238": 4.468e9
        }
        
        selected_isotopes = st.multiselect("Selecione is√≥topos para comparar:", 
                                         list(isotopos_compare.keys()),
                                         default=["Tecn√©cio-99m", "Iodo-131", "Carbono-14"])
        
        if selected_isotopes:
            # Criar gr√°fico comparativo
            fig, ax = plt.subplots(figsize=(12, 8))
            
            colors = plt.cm.Set3(np.linspace(0, 1, len(selected_isotopes)))
            
            for i, iso in enumerate(selected_isotopes):
                T12 = isotopos_compare[iso]
                tempos = np.linspace(0, min(10 * T12, 1e10), 1000)
                atividade = 100 * np.exp(-math.log(2) * tempos / T12)
                
                label = f"{iso} (T¬Ω = {T12:.2e} anos)"
                ax.plot(tempos, atividade, color=colors[i], linewidth=2, label=label)
            
            ax.set_xlabel("Tempo (anos)")
            ax.set_ylabel("Atividade Relativa (%)")
            ax.set_title("Compara√ß√£o de Decaimento Radioativo")
            ax.legend()
            ax.grid(True)
            ax.set_yscale('log')
            
            # Ajustar escala do eixo x baseado nos valores
            max_time = max(isotopos_compare[iso] for iso in selected_isotopes)
            ax.set_xlim(0, min(10 * max_time, 1e11))
            
            st.pyplot(fig)
            
            # Tabela comparativa
            st.markdown("### üìã Tabela Comparativa")
            
            comparacao = []
            for iso in selected_isotopes:
                T12 = isotopos_compare[iso]
                lambda_val = math.log(2) / T12
                vida_media = 1 / lambda_val
                
                comparacao.append({
                    "Is√≥topo": iso,
                    "Meia-vida": T12,
                    "Constante Œª (ano‚Åª¬π)": lambda_val,
                    "Vida m√©dia": vida_media
                })
            
            df_compare = pd.DataFrame(comparacao)
            st.dataframe(df_compare.style.format({
                "Meia-vida": "{:.3e}",
                "Constante Œª (ano‚Åª¬π)": "{:.3e}",
                "Vida m√©dia": "{:.3e}"
            }), use_container_width=True)
    
    else:
        st.info(f"Conceito '{conceito}' em desenvolvimento.")

# =============================================================================
# M√ìDULOS ADICIONAIS (EM DESENVOLVIMENTO)
# =============================================================================

def modulo_quiz():
    st.header("üéØ Quiz Interativo de F√≠sica Radiol√≥gica")
    st.info("M√≥dulo em desenvolvimento. Em breve: perguntas interativas sobre conceitos radiol√≥gicos.")

def modulo_exportar():
    st.header("üíæ Exportar Dados e Resultados")
    st.info("M√≥dulo em desenvolvimento. Em breve: exporta√ß√£o completa de simula√ß√µes.")

def modulo_comparar():
    st.header("üìä Comparar Simula√ß√µes")
    st.info("M√≥dulo em desenvolvimento. Em breve: compara√ß√£o entre diferentes cen√°rios.")

# =============================================================================
# ROTEIRIZADOR PRINCIPAL
# =============================================================================

def main():
    # Mapeamento de m√≥dulos para fun√ß√µes
    modulos_map = {
        "Data√ß√£o Radiom√©trica": modulo_datacao_radiometrica,
        "Blindagem Radiol√≥gica": modulo_blindagem,
        "Radioterapia": modulo_radioterapia,
        "Distribui√ß√£o de Dose": modulo_distribuicao_dose,
        "Aplica√ß√µes Cl√≠nicas": modulo_aplicacoes_clinicas,
        "Aplica√ß√µes Ambientais": modulo_aplicacoes_ambientais,
        "Efeito Compton": modulo_efeito_compton,
        "Produ√ß√£o de Pares": modulo_producao_pares,
        "Exposi√ß√£o Ocupacional": modulo_exposicao_ocupacional,
        "Cen√°rios Hist√≥ricos": modulo_cenarios_historicos,
        "Decaimento Radioativo": modulo_decaimento_radioativo,
        "Modo Explicativo": modulo_explicativo,
        "Quiz Interativo": modulo_quiz,
        "Exportar Dados": modulo_exportar,
        "Comparar Simula√ß√µes": modulo_comparar
    }
    
    # Executar o m√≥dulo selecionado
    if modulo in modulos_map:
        modulos_map[modulo]()
    else:
        st.error("M√≥dulo n√£o encontrado!")

if __name__ == "__main__":
    main()
# Continua√ß√£o do c√≥digo anterior...

# =============================================================================
# M√ìDULO 13: SISTEMA DE AJUDA E TUTORIAIS
# =============================================================================

def modulo_ajuda():
    st.header("‚ùì Sistema de Ajuda e Tutoriais")
    
    st.info("""
    **Bem-vindo ao sistema de ajuda do RadSimLab Pro!**
    Aqui voc√™ encontrar√° tutoriais, explica√ß√µes e dicas para usar cada m√≥dulo.
    """)
    
    topicos = {
        "Introdu√ß√£o ao RadSimLab": "introducao",
        "Data√ß√£o Radiom√©trica": "datacao_help",
        "Blindagem Radiol√≥gica": "blindagem_help",
        "Radioterapia": "radioterapia_help",
        "Distribui√ß√£o de Dose": "dose_help",
        "Efeito Compton": "compton_help",
        "Produ√ß√£o de Pares": "pares_help",
        "Dicas Gerais": "dicas_gerais"
    }
    
    topico = st.selectbox("Selecione o t√≥pico de ajuda:", list(topicos.keys()))
    
    if topico == "Introdu√ß√£o ao RadSimLab":
        st.markdown("""
        ## üéØ Introdu√ß√£o ao RadSimLab Pro
        
        **O que √© o RadSimLab Pro?**
        RadSimLab Pro √© um simulador educacional avan√ßado para f√≠sica radiol√≥gica, 
        desenvolvido para estudantes, professores e profissionais da √°rea.
        
        **Principais Caracter√≠sticas:**
        - Simula√ß√µes realistas de fen√¥menos radiol√≥gicos
        - Interface intuitiva e amig√°vel
        - Visualiza√ß√µes gr√°ficas interativas
        - Exporta√ß√£o de dados e resultados
        - Modo explicativo com conceitos te√≥ricos
        
        **Como Usar:**
        1. Selecione o m√≥dulo desejado na sidebar
        2. Configure os par√¢metros de entrada
        3. Clique no bot√£o de calcular/simular
        4. Analise os resultados e gr√°ficos
        5. Exporte os dados se necess√°rio
        
        **Requisitos do Sistema:**
        - Navegador web moderno
        - Conex√£o com internet (para vers√£o web)
        - Python 3.8+ (para vers√£o desktop)
        """)
    
    elif topico == "Data√ß√£o Radiom√©trica":
        st.markdown("""
        ## ‚è≥ M√≥dulo de Data√ß√£o Radiom√©trica
        
        **O que √© data√ß√£o radiom√©trica?**
        M√©todo para determinar a idade de materiais baseado no decaimento 
        radioativo de is√≥topos naturais.
        
        **M√©todos Dispon√≠veis:**
        - **Carbono-14:** Para materiais org√¢nicos at√© ~50,000 anos
        - **Pot√°ssio-Arg√¥nio:** Para rochas vulc√¢nicas
        - **Ur√¢nio-Chumbo:** Para rochas muito antigas
        - **Rub√≠dio-Estr√¥ncio:** Para rochas √≠gneas e metam√≥rficas
        
        **Como Usar:**
        1. Selecione o m√©todo desejado
        2. Insira a fra√ß√£o remanescente ou raz√£o isot√≥pica
        3. Configure a meia-vida se necess√°rio
        4. Clique em calcular para obter a idade
        
        **F√≥rmula do Carbono-14:**
        t = (T¬Ω/ln(2)) √ó ln(N‚ÇÄ/N)
        
        Onde:
        - t = idade
        - T¬Ω = meia-vida
        - N‚ÇÄ = quantidade inicial
        - N = quantidade atual
        
        **Dica:** Use o slider para ajustar precisamente a fra√ß√£o remanescente.
        """)
    
    elif topico == "Blindagem Radiol√≥gica":
        st.markdown("""
        ## üß± M√≥dulo de Blindagem Radiol√≥gica
        
        **O que √© blindagem radiol√≥gica?**
        C√°lculo da espessura necess√°ria de material para reduzir a radia√ß√£o 
        a n√≠veis seguros.
        
        **Materiais Dispon√≠veis:**
        - Chumbo (alto Z, alta densidade)
        - Concreto (uso em constru√ß√µes)
        - √Ågua (baixo custo, facilidade)
        - A√ßo (resist√™ncia estrutural)
        - Tungst√™nio (alta efici√™ncia)
        - Ur√¢nio (blindagem compacta)
        
        **Lei da Atenua√ß√£o:**
        I = I‚ÇÄ √ó B √ó e^(-Œºx)
        
        Onde:
        - I = intensidade ap√≥s blindagem
        - I‚ÇÄ = intensidade inicial
        - B = fator de build-up
        - Œº = coeficiente de atenua√ß√£o
        - x = espessura
        
        **Fator de Build-up:**
        Considera a radia√ß√£o espalhada que atinge o detector. Valores t√≠picos:
        - Baixo: 1.5 (geometria favor√°vel)
        - M√©dio: 2.0 (configura√ß√£o padr√£o)
        - Alto: 3.0 (geometria desfavor√°vel)
        
        **Dica:** Compare diferentes materiais para encontrar o melhor custo-benef√≠cio.
        """)
    
    else:
        st.info(f"T√≥pico de ajuda '{topico}' em desenvolvimento.")

# =============================================================================
# M√ìDULO 14: CALCULADORA AVAN√áADA
# =============================================================================

def modulo_calculadora_avancada():
    st.header("üßÆ Calculadora Avan√ßada de F√≠sica Radiol√≥gica")
    
    st.info("""
    **Calculadora com fun√ß√µes especializadas para f√≠sica radiol√≥gica.**
    Realize c√°lculos complexos com unidades apropriadas.
    """)
    
    calc_type = st.radio("Tipo de c√°lculo:", 
                        ["Convers√£o de Unidades", "C√°lculo de Dose", 
                         "Decaimento Radioativo", "Atenua√ß√£o", "Outros"],
                        horizontal=True)
    
    if calc_type == "Convers√£o de Unidades":
        st.markdown("### üîÑ Convers√£o de Unidades de Radia√ß√£o")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            valor = st.number_input("Valor para converter:", value=1.0, step=0.1)
            unidade_origem = st.selectbox("De:", 
                                        ["Gy", "Sv", "rad", "rem", "Bq", "Ci"])
        
        with col2:
            unidade_destino = st.selectbox("Para:", 
                                         ["Gy", "Sv", "rad", "rem", "Bq", "Ci"])
            
            # Fatores de convers√£o
            fatores = {
                "Gy": {"Sv": 1, "rad": 100, "rem": 100},
                "Sv": {"Gy": 1, "rad": 100, "rem": 100},
                "rad": {"Gy": 0.01, "Sv": 0.01, "rem": 1},
                "rem": {"Gy": 0.01, "Sv": 0.01, "rad": 1},
                "Bq": {"Ci": 2.703e-11},
                "Ci": {"Bq": 3.7e10}
            }
        
        with col3:
            st.markdown("**üìä Fatores de Convers√£o:**")
            st.markdown("- 1 Gy = 100 rad")
            st.markdown("- 1 Sv = 100 rem") 
            st.markdown("- 1 Ci = 3.7√ó10¬π‚Å∞ Bq")
            st.markdown("- 1 Bq = 2.703√ó10‚Åª¬π¬π Ci")
        
        if st.button("üîÑ Converter"):
            if unidade_origem == unidade_destino:
                resultado = valor
            elif unidade_origem in fatores and unidade_destino in fatores[unidade_origem]:
                resultado = valor * fatores[unidade_origem][unidade_destino]
            else:
                st.error("Convers√£o n√£o suportada!")
                return
                
            st.markdown(f'<div class="result-box"><h4>üîÅ Resultado: <span style="color:#d32f2f">{valor} {unidade_origem} = {resultado} {unidade_destino}</span></h4></div>', unsafe_allow_html=True)
    
    elif calc_type == "C√°lculo de Dose":
        st.markdown("### üíâ C√°lculo de Dose Absorvida")
        
        col1, col2 = st.columns(2)
        
        with col1:
            energia = st.number_input("Energia da radia√ß√£o (MeV):", value=1.0, step=0.1)
            fluencia = st.number_input("Flu√™ncia (part√≠culas/cm¬≤):", value=1e6, step=1e5, format="%.0e")
            massa = st.number_input("Massa do tecido (g):", value=1.0, step=0.1)
        
        with col2:
            coef_absorcao = st.number_input("Coeficiente de absor√ß√£o (cm¬≤/g):", value=0.1, step=0.01)
            fator_qualidade = st.number_input("Fator de qualidade:", value=1.0, step=0.1)
            
            # C√°lculo da dose
            dose_absorvida = (energia * 1.602e-13 * fluencia * coef_absorcao) / massa
            dose_efetiva = dose_absorvida * fator_qualidade
        
        if st.button("üíâ Calcular Dose"):
            st.markdown("---")
            st.markdown("### üìä Resultados")
            
            col_res1, col_res2 = st.columns(2)
            
            with col_res1:
                st.markdown(f'<div class="result-box"><h4>üìà Dose absorvida: <span style="color:#d32f2f">{dose_absorvida:.3e} Gy</span></h4></div>', unsafe_allow_html=True)
            
            with col_res2:
                st.markdown(f'<div class="result-box"><h4>üõ°Ô∏è Dose efetiva: <span style="color:#d32f2f">{dose_efetiva:.3e} Sv</span></h4></div>', unsafe_allow_html=True)
            
            # Detalhes do c√°lculo
            st.markdown("**üîç Detalhes do C√°lculo:**")
            st.markdown(f"- Energia por part√≠cula: {energia} MeV = {energia*1.602e-13:.3e} J")
            st.markdown(f"- Energia total depositada: {energia*1.602e-13*fluencia*coef_absorcao:.3e} J")
            st.markdown(f"- Dose = Energia / Massa = {dose_absorvida:.3e} Gy")
            st.markdown(f"- Dose efetiva = Dose √ó Fator qualidade = {dose_efetiva:.3e} Sv")
    
    else:
        st.info("Funcionalidade em desenvolvimento.")

# =============================================================================
# M√ìDULO 15: BANCO DE DADOS DE IS√ìTOPOS
# =============================================================================

def modulo_banco_isotopos():
    st.header("üìö Banco de Dados de Radiois√≥topos")
    
    st.info("""
    **Consulta de propriedades de radiois√≥topos comuns.**
    Pesquise por is√≥topo, meia-vida, tipo de decaimento, etc.
    """)
    
    # Banco de dados de is√≥topos
    isotopos_db = {
        "H-3": {"nome": "Tr√≠tio", "meia_vida": 12.32, "unidade": "anos", "decaimento": "Œ≤-", "energia": 0.0186, "aplicacao": "Marcador biol√≥gico"},
        "C-14": {"nome": "Carbono-14", "meia_vida": 5730, "unidade": "anos", "decaimento": "Œ≤-", "energia": 0.156, "aplicacao": "Data√ß√£o"},
        "Na-22": {"nome": "S√≥dio-22", "meia_vida": 2.602, "unidade": "anos", "decaimento": "Œ≤+", "energia": 0.545, "aplicacao": "Calibra√ß√£o"},
        "P-32": {"nome": "F√≥sforo-32", "meia_vida": 14.29, "unidade": "dias", "decaimento": "Œ≤-", "energia": 1.71, "aplicacao": "Terapia"},
        "S-35": {"nome": "Enxofre-35", "meia_vida": 87.44, "unidade": "dias", "decaimento": "Œ≤-", "energia": 0.167, "aplicacao": "Pesquisa"},
        "K-40": {"nome": "Pot√°ssio-40", "meia_vida": 1.25e9, "unidade": "anos", "decaimento": "Œ≤-", "energia": 1.31, "aplicacao": "Data√ß√£o"},
        "Co-60": {"nome": "Cobalto-60", "meia_vida": 5.27, "unidade": "anos", "decaimento": "Œ≤-", "energia": 1.17, "aplicacao": "Radioterapia"},
        "Sr-90": {"nome": "Estr√¥ncio-90", "meia_vida": 28.8, "unidade": "anos", "decaimento": "Œ≤-", "energia": 0.546, "aplicacao": "Geradores"},
        "I-131": {"nome": "Iodo-131", "meia_vida": 8.02, "unidade": "dias", "decaimento": "Œ≤-", "energia": 0.606, "aplicacao": "Medicina nuclear"},
        "Cs-137": {"nome": "C√©sio-137", "meia_vida": 30.17, "unidade": "anos", "decaimento": "Œ≤-", "energia": 0.514, "aplicacao": "Radiografia"},
        "Ra-226": {"nome": "R√°dio-226", "meia_vida": 1600, "unidade": "anos", "decaimento": "Œ±", "energia": 4.78, "aplicacao": "Hist√≥rico"},
        "U-235": {"nome": "Ur√¢nio-235", "meia_vida": 7.04e8, "unidade": "anos", "decaimento": "Œ±", "energia": 4.4, "aplicacao": "Combust√≠vel nuclear"},
        "U-238": {"nome": "Ur√¢nio-238", "meia_vida": 4.47e9, "unidade": "anos", "decaimento": "Œ±", "energia": 4.2, "aplicacao": "Data√ß√£o"},
        "Pu-239": {"nome": "Plut√¥nio-239", "meia_vida": 24110, "unidade": "anos", "decaimento": "Œ±", "energia": 5.15, "aplicacao": "Armas nucleares"},
        "Am-241": {"nome": "Amer√≠cio-241", "meia_vida": 432.2, "unidade": "anos", "decaimento": "Œ±", "energia": 5.49, "aplicacao": "Detetores de fuma√ßa"},
        "Tc-99m": {"nome": "Tecn√©cio-99m", "meia_vida": 6.0, "unidade": "horas", "decaimento": "IT", "energia": 0.141, "aplicacao": "Medicina nuclear"}
    }
    
    # Interface de pesquisa
    col1, col2 = st.columns(2)
    
    with col1:
        pesquisa = st.text_input("üîç Pesquisar is√≥topo:", placeholder="Ex: C-14, Co-60, I-131")
        filtro_decaimento = st.selectbox("Filtrar por tipo de decaimento:", 
                                       ["Todos", "Œ≤-", "Œ≤+", "Œ±", "IT", "EC"])
    
    with col2:
        ordenar_por = st.selectbox("Ordenar por:", 
                                 ["Is√≥topo", "Meia-vida", "Energia"])
        ordem = st.radio("Ordem:", ["Crescente", "Decrescente"], horizontal=True)
    
    # Filtrar e ordenar resultados
    isotopos_filtrados = []
    
    for iso, props in isotopos_db.items():
        if pesquisa and pesquisa.lower() not in iso.lower() and pesquisa.lower() not in props["nome"].lower():
            continue
            
        if filtro_decaimento != "Todos" and props["decaimento"] != filtro_decaimento:
            continue
            
        isotopos_filtrados.append((iso, props))
    
    # Ordena√ß√£o
    if ordenar_por == "Is√≥topo":
        isotopos_filtrados.sort(key=lambda x: x[0])
    elif ordenar_por == "Meia-vida":
        isotopos_filtrados.sort(key=lambda x: x[1]["meia_vida"])
    elif ordenar_por == "Energia":
        isotopos_filtrados.sort(key=lambda x: x[1]["energia"])
    
    if ordem == "Decrescente":
        isotopos_filtrados.reverse()
    
    # Exibir resultados
    st.markdown(f"### üìã Resultados da Pesquisa ({len(isotopos_filtrados)} is√≥topos)")
    
    if not isotopos_filtrados:
        st.warning("Nenhum is√≥topo encontrado com os crit√©rios de pesquisa.")
        return
    
    # Exibir em formato de tabela
    dados_tabela = []
    for iso, props in isotopos_filtrados:
        dados_tabela.append({
            "Is√≥topo": iso,
            "Nome": props["nome"],
            "Meia-vida": f"{props['meia_vida']} {props['unidade']}",
            "Decaimento": props["decaimento"],
            "Energia (MeV)": props["energia"],
            "Aplica√ß√£o": props["aplicacao"]
        })
    
    df_isotopos = pd.DataFrame(dados_tabela)
    st.dataframe(df_isotopos, use_container_width=True, height=400)
    
    # Detalhes do is√≥topo selecionado
    if len(isotopos_filtrados) == 1:
        iso, props = isotopos_filtrados[0]
        st.markdown("---")
        st.markdown(f"### üìö Detalhes do {iso} - {props['nome']}")
        
        col_det1, col_det2 = st.columns(2)
        
        with col_det1:
            st.markdown(f"**üìä Propriedades F√≠sicas:**")
            st.markdown(f"- **Meia-vida:** {props['meia_vida']} {props['unidade']}")
            st.markdown(f"- **Tipo de decaimento:** {props['decaimento']}")
            st.markdown(f"- **Energia m√©dia:** {props['energia']} MeV")
            
            # Calcular constante de decaimento
            if props["unidade"] == "anos":
                T12_anos = props["meia_vida"]
            elif props["unidade"] == "dias":
                T12_anos = props["meia_vida"] / 365.25
            elif props["unidade"] == "horas":
                T12_anos = props["meia_vida"] / (365.25 * 24)
            else:
                T12_anos = props["meia_vida"]
                
            lambda_val = math.log(2) / T12_anos
            st.markdown(f"- **Constante Œª:** {lambda_val:.3e} ano‚Åª¬π")
        
        with col_det2:
            st.markdown(f"**üéØ Aplica√ß√µes:**")
            st.markdown(f"- {props['aplicacao']}")
            
            st.markdown(f"**üìà Informa√ß√µes Adicionais:**")
            st.markdown(f"- **Vida m√©dia:** {1/lambda_val:.3e} anos")
            
            # Atividade espec√≠fica aproximada
            if props["unidade"] == "anos":
                atividade_esp = 4.2e23 / (props["meia_vida"] * 1.66e-24)
                st.markdown(f"- **Atividade espec√≠fica:** ~{atividade_esp:.1e} Bq/g")
        
        # Gr√°fico do decaimento
        tempos = np.linspace(0, min(5 * T12_anos, 1000), 100)
        atividade = 100 * np.exp(-lambda_val * tempos)
        
        fig, ax = plt.subplots(figsize=(10, 5))
        ax.plot(tempos, atividade, 'b-', linewidth=2)
        ax.set_xlabel("Tempo (anos)")
        ax.set_ylabel("Atividade Relativa (%)")
        ax.set_title(f"Decaimento do {iso}")
        ax.grid(True)
        
        st.pyplot(fig)
    
    # Op√ß√£o de download
    csv_data = df_isotopos.to_csv(index=False)
    st.download_button("üì• Baixar Tabela de Is√≥topos", data=csv_data, 
                      file_name="banco_isotopos_radiometricos.csv", 
                      mime="text/csv", use_container_width=True)

# =============================================================================
# M√ìDULO 16: RELAT√ìRIOS PERSONALIZADOS
# =============================================================================

def modulo_relatorios():
    st.header("üìù Gerador de Relat√≥rios Personalizados")
    
    st.info("""
    **Gere relat√≥rios personalizados das suas simula√ß√µes.**
    Inclua gr√°ficos, tabelas e an√°lises em formato profissional.
    """)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**üìä Conte√∫do do Relat√≥rio:**")
        incluir_graficos = st.checkbox("Incluir gr√°ficos", value=True)
        incluir_tabelas = st.checkbox("Incluir tabelas", value=True)
        incluir_calculos = st.checkbox("Incluir c√°lculos detalhados", value=True)
        incluir_conclusoes = st.checkbox("Incluir conclus√µes", value=True)
    
    with col2:
        st.markdown("**üìã Formata√ß√£o:**")
        formato = st.selectbox("Formato do relat√≥rio:", 
                             ["Texto", "Markdown", "HTML", "PDF (em desenvolvimento)"])
        estilo = st.selectbox("Estilo:", 
                            ["Acad√™mico", "T√©cnico", "Simples", "Completo"])
    
    titulo = st.text_input("T√≠tulo do relat√≥rio:", "Relat√≥rio de Simula√ß√£o Radiol√≥gica")
    autor = st.text_input("Autor:", "Usu√°rio RadSimLab Pro")
    data_relatorio = st.date_input("Data do relat√≥rio:", datetime.now())
    
    # √Årea para conte√∫do personalizado
    conteudo_personalizado = st.text_area("Conte√∫do adicional:", 
                                        "Descreva aqui observa√ß√µes, metodologia ou resultados adicionais...",
                                        height=100)
    
    if st.button("üìù Gerar Relat√≥rio", use_container_width=True):
        # Construir relat√≥rio
        relatorio = f"""
        {titulo.upper()}
        {'=' * len(titulo)}
        
        Data: {data_relatorio.strftime('%d/%m/%Y')}
        Autor: {autor}
        
        RESUMO
        ------
        Relat√≥rio gerado automaticamente pelo RadSimLab Pro.
        Cont√©m resultados de simula√ß√µes radiol√≥gicas com an√°lises detalhadas.
        
        """
        
        if incluir_calculos:
            relatorio += """
            METODOLOGIA
            ----------
            Os c√°lculos foram realizados usando as equa√ß√µes fundamentais da f√≠sica radiol√≥gica:
            - Lei do decaimento radioativo: N(t) = N‚ÇÄ √ó e^(-Œªt)
            - Lei da atenua√ß√£o: I = I‚ÇÄ √ó e^(-Œºx)
            - Efeito Compton: E' = E / [1 + (E/m‚Çëc¬≤)(1 - cosŒ∏)]
            
            Todas as constantes f√≠sicas utilizadas est√£o de acordo com valores padr√£o do CODATA.
            
            """
        
        if conteudo_personalizado:
            relatorio += f"""
            OBSERVA√á√ïES ADICIONAIS
            ---------------------
            {conteudo_personalizado}
            
            """
        
        if incluir_conclusoes:
            relatorio += """
            CONCLUS√ïES
            ----------
            As simula√ß√µes realizadas fornecem insights valiosos sobre o comportamento
            da radia√ß√£o em diferentes cen√°rios. Os resultados est√£o de acordo com o
            esperado teoricamente e podem ser utilizados para fins educacionais e de
            planejamento de prote√ß√£o radiol√≥gica.
            
            Recomenda-se a verifica√ß√£o experimental dos resultados para aplica√ß√µes
            cr√≠ticas ou uso em contextos profissionais.
            
            """
        
        relatorio += """
        ASSINATURA
        ---------
        Relat√≥rio gerado automaticamente por:
        üî¨ RadSimLab Pro - Simulador Radiol√≥gico Avan√ßado
        üìß radsimlab.pro@example.com
        üåê https://radsimlab.example.com
        
        """
        
        st.markdown("---")
        st.markdown("### üìÑ Visualiza√ß√£o do Relat√≥rio")
        
        # Exibir preview
        st.text_area("Pr√©-visualiza√ß√£o:", relatorio, height=300)
        
        # Op√ß√µes de download
        if formato == "Texto":
            st.download_button("üì• Baixar Relat√≥rio (.txt)", data=relatorio, 
                              file_name=f"relatorio_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt", 
                              mime="text/plain", use_container_width=True)
        
        elif formato == "Markdown":
            st.info("Funcionalidade Markdown em desenvolvimento.")
        
        elif formato == "HTML":
            # Converter para HTML b√°sico
            html_relatorio = f"""
            <!DOCTYPE html>
            <html>
            <head>
                <title>{titulo}</title>
                <style>
                    body {{ font-family: Arial, sans-serif; margin: 40px; }}
                    h1 {{ color: #2E86AB; }}
                    h2 {{ color: #A23B72; }}
                    .header {{ background-color: #f0f0f0; padding: 20px; border-radius: 10px; }}
                    .content {{ margin: 20px 0; }}
                    .signature {{ margin-top: 50px; padding-top: 20px; border-top: 2px solid #ccc; }}
                </style>
            </head>
            <body>
                <div class="header">
                    <h1>{titulo}</h1>
                    <p><strong>Data:</strong> {data_relatorio.strftime('%d/%m/%Y')}</p>
                    <p><strong>Autor:</strong> {autor}</p>
                </div>
                
                <div class="content">
                    {relatorio.replace('\n', '<br>').replace('        ', '&nbsp;&nbsp;&nbsp;&nbsp;')}
                </div>
                
                <div class="signature">
                    <p><em>Relat√≥rio gerado automaticamente por RadSimLab Pro</em></p>
                </div>
            </body>
            </html>
            """
            
            st.download_button("üì• Baixar Relat√≥rio (.html)", data=html_relatorio, 
                              file_name=f"relatorio_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html", 
                              mime="text/html", use_container_width=True)
        
        else:
            st.info("Formato PDF em desenvolvimento.")

# =============================================================================
# M√ìDULO 17: VALIDA√á√ÉO E VERIFICA√á√ÉO
# =============================================================================

def modulo_validacao():
    st.header("‚úÖ M√≥dulo de Valida√ß√£o e Verifica√ß√£o")
    
    st.info("""
    **Verifique a precis√£o dos c√°lculos do RadSimLab Pro.**
    Compare com resultados conhecidos e refer√™ncias cient√≠ficas.
    """)
    
    teste = st.selectbox("Selecione o teste de valida√ß√£o:", 
                        ["Decaimento Radioativo", "Efeito Compton", 
                         "Atenua√ß√£o", "Data√ß√£o C-14", "Todos"])
    
    if st.button("‚úÖ Executar Testes de Valida√ß√£o"):
        resultados = []
        
        # Teste 1: Decaimento Radioativo
        if teste in ["Decaimento Radioativo", "Todos"]:
            st.markdown("### ‚öõÔ∏è Teste 1: Decaimento Radioativo")
            
            # Para meia-vida de 1 ano, ap√≥s 1 ano deve restar 50%
            T12 = 1.0
            lambda_val = math.log(2) / T12
            N0 = 1000
            N1 = N0 * math.exp(-lambda_val * T12)
            esperado = N0 * 0.5
            erro = abs(N1 - esperado) / esperado * 100
            
            status = "‚úÖ PASSOU" if erro < 0.1 else "‚ùå FALHOU"
            cor = "green" if erro < 0.1 else "red"
            
            st.markdown(f"""
            **Par√¢metros:**
            - Meia-vida: {T12} ano
            - N√∫mero inicial: {N0} √°tomos
            - Tempo: {T12} ano
            
            **Resultados:**
            - Esperado: {esperado} √°tomos (50%)
            - Calculado: {N1:.2f} √°tomos
            - Erro: {erro:.4f}%
            - Status: <span style="color:{cor}">{status}</span>
            """, unsafe_allow_html=True)
            
            resultados.append(("Decaimento Radioativo", erro < 0.1, erro))
        
        # Teste 2: Efeito Compton
        if teste in ["Efeito Compton", "Todos"]:
            st.markdown("### ‚ö° Teste 2: Efeito Compton")
            
            # Para E=1 MeV, Œ∏=90¬∞, E' deve ser ~0.338 MeV
            E = 1.0
            theta = 90
            m_e = 0.511  # MeV
            
            theta_rad = math.radians(theta)
            denominador = 1 + (E / m_e) * (1 - math.cos(theta_rad))
            E_prime = E / denominador
            esperado = 0.338
            erro = abs(E_prime - esperado) / esperado * 100
            
            status = "‚úÖ PASSOU" if erro < 1.0 else "‚ùå FALHOU"
            cor = "green" if erro < 1.0 else "red"
            
            st.markdown(f"""
            **Par√¢metros:**
            - Energia incidente: {E} MeV
            - √Çngulo: {theta}¬∞
            - m‚Çëc¬≤: {m_e} MeV
            
            **Resultados:**
            - Esperado: {esperado} MeV
            - Calculado: {E_prime:.4f} MeV
            - Erro: {erro:.2f}%
            - Status: <span style="color:{cor}">{status}</span>
            """, unsafe_allow_html=True)
            
            resultados.append(("Efeito Compton", erro < 1.0, erro))
        
        # Teste 3: Atenua√ß√£o
        if teste in ["Atenua√ß√£o", "Todos"]:
            st.markdown("### üß± Teste 3: Atenua√ß√£o")
            
            # Para Œº=0.1 cm‚Åª¬π, x=10 cm, I/I0 deve ser e^(-1) ‚âà 0.3679
            mu = 0.1
            x = 10.0
            I0 = 100.0
            I = I0 * math.exp(-mu * x)
            esperado = I0 * math.exp(-1)
            erro = abs(I - esperado) / esperado * 100
            
            status = "‚úÖ PASSOU" if erro < 0.1 else "‚ùå FALHOU"
            cor = "green" if erro < 0.1 else "red"
            
            st.markdown(f"""
            **Par√¢metros:**
            - Coeficiente Œº: {mu} cm‚Åª¬π
            - Espessura: {x} cm
            - Intensidade inicial: {I0}
            
            **Resultados:**
            - Esperado: {esperado:.4f}
            - Calculado: {I:.4f}
            - Erro: {erro:.4f}%
            - Status: <span style="color:{cor}">{status}</span>
            """, unsafe_allow_html=True)
            
            resultados.append(("Atenua√ß√£o", erro < 0.1, erro))
        
        # Teste 4: Data√ß√£o C-14
        if teste in ["Data√ß√£o C-14", "Todos"]:
            st.markdown("### ‚è≥ Teste 4: Data√ß√£o por Carbono-14")
            
            # Para N/N0=0.5 e T¬Ω=5730 anos, idade deve ser 5730 anos
            frac = 0.5
            T12 = 5730.0
            lambda_val = math.log(2) / T12
            idade = (1 / lambda_val) * math.log(1 / frac)
            esperado = T12
            erro = abs(idade - esperado) / esperado * 100
            
            status = "‚úÖ PASSOU" if erro < 0.1 else "‚ùå FALHOU"
            cor = "green" if erro < 0.1 else "red"
            
            st.markdown(f"""
            **Par√¢metros:**
            - Fra√ß√£o remanescente: {frac}
            - Meia-vida do C-14: {T12} anos
            
            **Resultados:**
            - Esperado: {esperado} anos
            - Calculado: {idade:.2f} anos
            - Erro: {erro:.4f}%
            - Status: <span style="color:{cor}">{status}</span>
            """, unsafe_allow_html=True)
            
            resultados.append(("Data√ß√£o C-14", erro < 0.1, erro))
        
        # Resumo dos testes
        if teste == "Todos":
            st.markdown("---")
            st.markdown("### üìä Resumo dos Testes de Valida√ß√£o")
            
            total_testes = len(resultados)
            testes_passados = sum(1 for _, passed, _ in resultados if passed)
            percentual_passou = (testes_passados / total_testes) * 100
            
            st.markdown(f"""
            **Resultado Geral:**
            - Total de testes: {total_testes}
            - Testes passados: {testes_passados}
            - Percentual: {percentual_passou:.1f}%
            """)
            
            if percentual_passou == 100:
                st.success("üéâ TODOS OS TESTES PASSARAM! O RadSimLab Pro est√° calculando corretamente.")
            else:
                st.warning("‚ö†Ô∏è Alguns testes falharam. Verifique os c√°lculos.")
            
            # Tabela de resultados
            df_resultados = pd.DataFrame(resultados, columns=["Teste", "Status", "Erro (%)"])
            df_resultados["Status"] = df_resultados["Status"].apply(lambda x: "‚úÖ" if x else "‚ùå")
            
            st.dataframe(df_resultados.style.format({"Erro (%)": "{:.4f}"}), use_container_width=True)

# =============================================================================
# ATUALIZA√á√ÉO DO ROTEIRIZADOR PRINCIPAL
# =============================================================================

# Atualizar o mapeamento de m√≥dulos para incluir os novos m√≥dulos
modulos_map.update({
    "Sistema de Ajuda": modulo_ajuda,
    "Calculadora Avan√ßada": modulo_calculadora_avancada,
    "Banco de Dados de Is√≥topos": modulo_banco_isotopos,
    "Relat√≥rios Personalizados": modulo_relatorios,
    "Valida√ß√£o e Verifica√ß√£o": modulo_validacao
})

# =============================================================================
# RODAP√â E INFORMA√á√ïES DO SISTEMA
# =============================================================================

def mostrar_rodape():
    st.markdown("---")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("**üìä Estat√≠sticas do Sistema:**")
        st.markdown(f"- M√≥dulos dispon√≠veis: {len(modulos_map)}")
        st.markdown(f"- √öltima atualiza√ß√£o: {datetime.now().strftime('%d/%m/%Y %H:%M')}")
    
    with col2:
        st.markdown("**üîß Desenvolvimento:**")
        st.markdown("- Python 3.8+")
        st.markdown("- Streamlit")
        st.markdown("- NumPy, Matplotlib")
    
    with col3:
        st.markdown("**üìû Suporte:**")
        st.markdown("- üìß suporte@radsimlab.com")
        st.markdown("- üåê radsimlab.com/docs")
        st.markdown("- üêõ Reportar bugs")
    
    st.markdown("---")
    st.markdown("*RadSimLab Pro v2.0 - Simulador Radiol√≥gico Avan√ßado*")

# =============================================================================
# EXECU√á√ÉO PRINCIPAL ATUALIZADA
# =============================================================================

def main():
    # Executar o m√≥dulo selecionado
    if modulo in modulos_map:
        modulos_map[modulo]()
    else:
        st.error("M√≥dulo n√£o encontrado!")
    
    # Mostrar rodape em todas as p√°ginas
    mostrar_rodape()

if __name__ == "__main__":
    main()
# Continua√ß√£o do c√≥digo anterior...

# =============================================================================
# MELHORIAS E CORRE√á√ïES ADICIONAIS
# =============================================================================

# Corre√ß√£o para as vari√°veis h e c no m√≥dulo Compton
# As constantes foram definidas corretamente dentro da fun√ß√£o modulo_efeito_compton()

# =============================================================================
# SISTEMA DE LOG E MONITORAMENTO
# =============================================================================

import logging
from logging.handlers import RotatingFileHandler
import os

# Configurar sistema de logging
def setup_logging():
    if not os.path.exists('logs'):
        os.makedirs('logs')
    
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            RotatingFileHandler('logs/radsimlab.log', maxBytes=1000000, backupCount=5),
            logging.StreamHandler()
        ]
    )
    
    return logging.getLogger('RadSimLab')

# Inicializar logger
logger = setup_logging()

# =============================================================================
# SISTEMA DE CONFIGURA√á√ÉO
# =============================================================================

import json
import yaml

class ConfigManager:
    def __init__(self):
        self.config_file = 'config_radsimlab.json'
        self.default_config = {
            'unidades': 'SI',
            'tema': 'claro',
            'precisao': 6,
            'auto_salvar': True,
            'idioma': 'portugues',
            'modulos_ativos': list(modulos_map.keys())
        }
        self.config = self.carregar_config()
    
    def carregar_config(self):
        try:
            if os.path.exists(self.config_file):
                with open(self.config_file, 'r') as f:
                    return json.load(f)
            return self.default_config
        except Exception as e:
            logger.error(f"Erro ao carregar configura√ß√£o: {e}")
            return self.default_config
    
    def salvar_config(self):
        try:
            with open(self.config_file, 'w') as f:
                json.dump(self.config, f, indent=2)
            logger.info("Configura√ß√£o salva com sucesso")
        except Exception as e:
            logger.error(f"Erro ao salvar configura√ß√£o: {e}")
    
    def get(self, chave, padrao=None):
        return self.config.get(chave, padrao)
    
    def set(self, chave, valor):
        self.config[chave] = valor
        if self.config.get('auto_salvar', True):
            self.salvar_config()

# Inicializar gerenciador de configura√ß√£o
config_manager = ConfigManager()

# =============================================================================
# SISTEMA DE TRADU√á√ÉO
# =============================================================================

class TranslationSystem:
    def __init__(self):
        self.translations = {
            'portugues': {
                'welcome': 'Bem-vindo ao RadSimLab Pro',
                'calculate': 'Calcular',
                'results': 'Resultados',
                'error': 'Erro',
                'success': 'Sucesso',
                'warning': 'Aviso',
                # Adicionar mais tradu√ß√µes conforme necess√°rio
            },
            'english': {
                'welcome': 'Welcome to RadSimLab Pro',
                'calculate': 'Calculate',
                'results': 'Results',
                'error': 'Error',
                'success': 'Success',
                'warning': 'Warning',
            },
            'espanol': {
                'welcome': 'Bienvenido a RadSimLab Pro',
                'calculate': 'Calcular',
                'results': 'Resultados',
                'error': 'Error',
                'success': '√âxito',
                'warning': 'Advertencia',
            }
        }
    
    def t(self, key, lang=None):
        if lang is None:
            lang = config_manager.get('idioma', 'portugues')
        return self.translations.get(lang, {}).get(key, key)

# Inicializar sistema de tradu√ß√£o
translator = TranslationSystem()

# =============================================================================
# SISTEMA DE CACHE PARA PERFORMANCE
# =============================================================================

from functools import lru_cache
import hashlib

class CacheSystem:
    def __init__(self, max_size=100):
        self.cache = {}
        self.max_size = max_size
    
    def gerar_chave(self, *args, **kwargs):
        """Gera uma chave √∫nica para os argumentos"""
        key_str = str(args) + str(sorted(kwargs.items()))
        return hashlib.md5(key_str.encode()).hexdigest()
    
    def get(self, key):
        return self.cache.get(key)
    
    def set(self, key, value):
        if len(self.cache) >= self.max_size:
            # Remover o item mais antigo (FIFO)
            oldest_key = next(iter(self.cache))
            del self.cache[oldest_key]
        self.cache[key] = value
    
    def clear(self):
        self.cache.clear()

# Inicializar sistema de cache
cache_system = CacheSystem()

# Decorator para fun√ß√µes que beneficiam de cache
def cached_function(func):
    @lru_cache(maxsize=50)
    def wrapper(*args, **kwargs):
        return func(*args, **kwargs)
    return wrapper

# =============================================================================
# MELHORIAS DE PERFORMANCE PARA C√ÅLCULOS INTENSIVOS
# =============================================================================

@cached_function
def calcular_decaimento(N0, lambda_val, tempo):
    """Fun√ß√£o otimizada para c√°lculo de decaimento com cache"""
    return N0 * math.exp(-lambda_val * tempo)

@cached_function  
def calcular_compton(E, theta_graus, m_e=0.511):
    """Fun√ß√£o otimizada para efeito Compton com cache"""
    theta_rad = math.radians(theta_graus)
    denominador = 1 + (E / m_e) * (1 - math.cos(theta_rad))
    return E / denominador

@cached_function
def calcular_atenuacao(I0, mu, x):
    """Fun√ß√£o otimizada para atenua√ß√£o com cache"""
    return I0 * math.exp(-mu * x)

# =============================================================================
# SISTEMA DE RELAT√ìRIOS DE ERROS
# =============================================================================

def reportar_erro(erro, modulo, detalhes=""):
    """Reporta erros para logging e exibi√ß√£o ao usu√°rio"""
    mensagem_erro = f"Erro em {modulo}: {erro}"
    if detalhes:
        mensagem_erro += f" | Detalhes: {detalhes}"
    
    logger.error(mensagem_erro)
    
    # Exibir para o usu√°rio de forma amig√°vel
    st.error(f"‚ùå Ocorreu um erro no m√≥dulo {modulo}. Detalhes t√©cnicos foram registrados.")
    st.info("üí° Dica: Verifique os valores de entrada e tente novamente.")
    
    if st.checkbox("Mostrar detalhes t√©cnicos do erro (para desenvolvedores)"):
        st.code(f"Erro: {erro}\nDetalhes: {detalhes}")

# =============================================================================
# ATUALIZA√á√ÉO DAS FUN√á√ïES EXISTENTES COM MELHORIAS
# =============================================================================

def modulo_datacao_radiometrica_otimizado():
    """Vers√£o otimizada do m√≥dulo de data√ß√£o"""
    try:
        st.header("‚è≥ Data√ß√£o Radiom√©trica")
        
        # ... (c√≥digo anterior, mas usando fun√ß√µes otimizadas)
        
        if st.button(translator.t('calculate')):
            # Usar fun√ß√£o otimizada com cache
            lambda_val = math.log(2) / meia_vida
            idade = (1 / lambda_val) * math.log(1 / frac_remanescente)
            
            # Resto do c√≥digo...
            
    except Exception as e:
        reportar_erro(e, "Data√ß√£o Radiom√©trica", str(e))

# =============================================================================
# SISTEMA DE BACKUP AUTOM√ÅTICO
# =============================================================================

def realizar_backup():
    """Realiza backup das configura√ß√µes e dados importantes"""
    try:
        backup_dir = 'backups'
        if not os.path.exists(backup_dir):
            os.makedirs(backup_dir)
        
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        backup_file = os.path.join(backup_dir, f'backup_{timestamp}.json')
        
        dados_backup = {
            'configuracoes': config_manager.config,
            'timestamp': timestamp,
            'versao': '2.0'
        }
        
        with open(backup_file, 'w') as f:
            json.dump(dados_backup, f, indent=2)
        
        logger.info(f"Backup realizado: {backup_file}")
        return True
        
    except Exception as e:
        logger.error(f"Erro no backup: {e}")
        return False

# =============================================================================
# INTERFACE DE ADMINISTRA√á√ÉO
# =============================================================================

def modulo_administracao():
    st.header("‚öôÔ∏è Painel de Administra√ß√£o")
    
    if not st.session_state.get('admin_mode', False):
        senha = st.text_input("Senha de administra√ß√£o:", type="password")
        if senha == "admin123":  # Senha padr√£o - mudar em produ√ß√£o
            st.session_state.admin_mode = True
            st.success("Modo administrador ativado")
        elif senha:
            st.error("Senha incorreta")
            return
    
    if st.session_state.get('admin_mode', False):
        tab1, tab2, tab3, tab4 = st.tabs(["Configura√ß√µes", "Logs", "Backup", "Estat√≠sticas"])
        
        with tab1:
            st.subheader("Configura√ß√µes do Sistema")
            
            col1, col2 = st.columns(2)
            
            with col1:
                novo_idioma = st.selectbox("Idioma:", ["portugues", "english", "espanol"])
                novo_tema = st.selectbox("Tema:", ["claro", "escuro"])
                precisao = st.slider("Precis√£o decimal:", 2, 10, 6)
            
            with col2:
                auto_salvar = st.checkbox("Salvamento autom√°tico", value=True)
                auto_backup = st.checkbox("Backup autom√°tico", value=False)
                logging_level = st.selectbox("N√≠vel de logging:", ["INFO", "DEBUG", "WARNING", "ERROR"])
            
            if st.button("üíæ Aplicar Configura√ß√µes"):
                config_manager.set('idioma', novo_idioma)
                config_manager.set('tema', novo_tema)
                config_manager.set('precisao', precisao)
                config_manager.set('auto_salvar', auto_salvar)
                config_manager.set('auto_backup', auto_backup)
                config_manager.set('logging_level', logging_level)
                
                st.success("Configura√ß√µes aplicadas com sucesso!")
        
        with tab2:
            st.subheader("Visualizador de Logs")
            
            if os.path.exists('logs/radsimlab.log'):
                with open('logs/radsimlab.log', 'r') as f:
                    logs = f.read()
                
                st.text_area("Logs do sistema:", logs, height=300)
                
                if st.button("üîÑ Atualizar Logs"):
                    st.rerun()
                
                if st.button("üßπ Limpar Logs"):
                    open('logs/radsimlab.log', 'w').close()
                    st.success("Logs limpos!")
            else:
                st.info("Nenhum arquivo de log encontrado.")
        
        with tab3:
            st.subheader("Gerenciamento de Backup")
            
            if st.button("üíæ Criar Backup Agora"):
                if realizar_backup():
                    st.success("Backup realizado com sucesso!")
                else:
                    st.error("Erro ao realizar backup.")
            
            # Listar backups existentes
            if os.path.exists('backups'):
                backups = sorted(os.listdir('backups'), reverse=True)
                if backups:
                    st.markdown("**Backups existentes:**")
                    for backup in backups[:5]:  # Mostrar apenas os 5 mais recentes
                        st.code(backup)
                else:
                    st.info("Nenhum backup encontrado.")
        
        with tab4:
            st.subheader("Estat√≠sticas do Sistema")
            
            col_stat1, col_stat2, col_stat3 = st.columns(3)
            
            with col_stat1:
                st.metric("M√≥dulos dispon√≠veis", len(modulos_map))
                st.metric("Configura√ß√µes salvas", len(config_manager.config))
            
            with col_stat2:
                st.metric("Itens em cache", len(cache_system.cache))
                if os.path.exists('logs/radsimlab.log'):
                    tamanho_log = os.path.getsize('logs/radsimlab.log')
                    st.metric("Tamanho do log", f"{tamanho_log/1024:.1f} KB")
            
            with col_stat3:
                if os.path.exists('backups'):
                    num_backups = len(os.listdir('backups'))
                    st.metric("Backups", num_backups)
        
        if st.button("üö™ Sair do Modo Administrador"):
            st.session_state.admin_mode = False
            st.success("Modo administrador desativado")

# =============================================================================
# SISTEMA DE ATUALIZA√á√ïES AUTOM√ÅTICAS
# =============================================================================

def verificar_atualizacoes():
    """Verifica se h√° atualiza√ß√µes dispon√≠veis"""
    try:
        # Em uma implementa√ß√£o real, isso faria uma requisi√ß√£o para um servidor
        # Por enquanto, √© apenas um placeholder
        return {
            'atualizacao_disponivel': False,
            'versao_atual': '2.0',
            'nova_versao': None,
            'url_download': None
        }
    except Exception as e:
        logger.error(f"Erro ao verificar atualiza√ß√µes: {e}")
        return {
            'atualizacao_disponivel': False,
            'erro': str(e)
        }

# =============================================================================
# MELHORIAS NA INTERFACE DO USU√ÅRIO
# =============================================================================

def carregar_estilo():
    """Carrega o estilo CSS baseado na configura√ß√£o"""
    tema = config_manager.get('tema', 'claro')
    
    if tema == 'escuro':
        return """
        <style>
            .main { background-color: #1E1E1E; color: #FFFFFF; }
            .stButton>button { background-color: #4CAF50; color: white; }
            .result-box { background-color: #2D3748; color: #E2E8F0; }
        </style>
        """
    else:
        return """
        <style>
            .main { background-color: #FFFFFF; color: #000000; }
            .stButton>button { background-color: #1E88E5; color: white; }
            .result-box { background-color: #E8F5E9; color: #1B5E20; }
        </style>
        """

# =============================================================================
# ATUALIZA√á√ÉO FINAL DO ROTEIRIZADOR PRINCIPAL
# =============================================================================

# Adicionar m√≥dulo de administra√ß√£o ao mapeamento
modulos_map["Administra√ß√£o"] = modulo_administracao

def main():
    # Carregar estilo
    st.markdown(carregar_estilo(), unsafe_allow_html=True)
    
    # Verificar atualiza√ß√µes (apenas uma vez por sess√£o)
    if 'atualizacao_verificada' not in st.session_state:
        info_atualizacao = verificar_atualizacoes()
        if info_atualizacao['atualizacao_disponivel']:
            st.sidebar.warning("üì¶ Atualiza√ß√£o dispon√≠vel!")
        st.session_state.atualizacao_verificada = True
    
    # Executar o m√≥dulo selecionado com tratamento de erro
    try:
        if modulo in modulos_map:
            modulos_map[modulo]()
        else:
            st.error("M√≥dulo n√£o encontrado!")
            
    except Exception as e:
        reportar_erro(e, modulo)
        st.error("Ocorreu um erro inesperado. Tente recarregar a p√°gina.")
        
        # Bot√£o para recarregar
        if st.button("üîÑ Recarregar P√°gina"):
            st.rerun()
    
    # Mostrar rodape
    mostrar_rodape()
    
    # Backup autom√°tico se configurado
    if config_manager.get('auto_backup', False):
        if 'ultimo_backup' not in st.session_state:
            if realizar_backup():
                st.session_state.ultimo_backup = datetime.now()
                logger.info("Backup autom√°tico realizado")
        
        # Verificar se passou 1 hora desde o √∫ltimo backup
        elif (datetime.now() - st.session_state.ultimo_backup).total_seconds() > 3600:
            if realizar_backup():
                st.session_state.ultimo_backup = datetime.now()
                logger.info("Backup autom√°tico realizado")

# =============================================================================
# INICIALIZA√á√ÉO DO SISTEMA
# =============================================================================

if __name__ == "__main__":
    # Inicializar session state
    if 'admin_mode' not in st.session_state:
        st.session_state.admin_mode = False
    if 'ultimo_backup' not in st.session_state:
        st.session_state.ultimo_backup = None
    
    # Iniciar aplica√ß√£o
    try:
        main()
    except Exception as e:
        logger.critical(f"Erro cr√≠tico na inicializa√ß√£o: {e}")
        st.error("‚ùå Erro cr√≠tico na aplica√ß√£o. Por favor, recarregue.")
        
        # Bot√£o de emerg√™ncia
        if st.button("üÜò Reiniciar Aplica√ß√£o"):
            # Limpar cache e session state
            cache_system.clear()
            for key in list(st.session_state.keys()):
                del st.session_state[key]
            st.rerun()
