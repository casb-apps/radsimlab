import streamlit as st
import math
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import time
from datetime import datetime
import base64

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="RadSimLab Pro",
    page_icon="‚ò¢Ô∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personalizado
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        color: #1E88E5;
        text-align: center;
        margin-bottom: 2rem;
    }
    .module-card {
        border-radius: 10px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        background-color: #f0f2f6;
    }
    .result-box {
        background-color: #e8f5e9;
        padding: 15px;
        border-radius: 10px;
        margin-top: 15px;
    }
    .warning-box {
        background-color: #ffebee;
        padding: 15px;
        border-radius: 10px;
        margin-top: 15px;
    }
</style>
""", unsafe_allow_html=True)

# T√≠tulo principal
st.markdown('<h1 class="main-header">üî¨ RadSimLab Pro ‚Äì Simulador Radiol√≥gico Avan√ßado</h1>', unsafe_allow_html=True)

# Sidebar com informa√ß√µes
with st.sidebar:
    st.image("https://img.icons8.com/dusk/64/000000/radioactive.png", width=80)
    st.title("RadSimLab Pro")
    st.markdown("---")
    st.markdown("### üìä Navega√ß√£o")
    
    # Menu de m√≥dulos
    modulos = {
        "Data√ß√£o Radiom√©trica": "datacao_radiometrica",
        "Blindagem Radiol√≥gica": "blindagem",
        "Radioterapia": "radioterapia",
        "Distribui√ß√£o de Dose": "dose",
        "Aplica√ß√µes Cl√≠nicas": "clinico",
        "Aplica√ß√µes Ambientais": "ambiental",
        "Efeito Compton": "compton",
        "Produ√ß√£o de Pares": "pares",
        "Exposi√ß√£o Ocupacional": "ocupacional",
        "Cen√°rios Hist√≥ricos": "historico",
        "Decaimento Radioativo": "decaimento",
        "Modo Explicativo": "explicativo",
        "Quiz Interativo": "quiz",
        "Exportar Dados": "exportar",
        "Comparar Simula√ß√µes": "comparar"
    }
    
    modulo = st.selectbox("Selecione o m√≥dulo", list(modulos.keys()))
    
    st.markdown("---")
    st.markdown("### ‚ÑπÔ∏è Sobre")
    st.info("""
    RadSimLab Pro √© uma ferramenta educacional para simula√ß√µes
    em f√≠sica radiol√≥gica. Desenvolvido para estudantes e
    profissionais da √°rea.
    """)
    
    st.markdown("---")
    st.markdown("### üé® Tema")
    tema = st.radio("Selecionar tema", ["Claro", "Escuro"], index=0)
    
    if tema == "Escuro":
        st.markdown("""
        <style>
            .stApp {
                background-color: #1E1E1E;
                color: #FFFFFF;
            }
        </style>
        """, unsafe_allow_html=True)

# Fun√ß√µes dos m√≥dulos
def modulo_datacao_radiometrica():
    st.header("‚è≥ Data√ß√£o Radiom√©trica")
    metodo = st.radio("Selecione o m√©todo:", ["Carbono-14", "Pot√°ssio-Arg√¥nio", "Ur√¢nio-Chumbo", "Rub√≠dio-Estr√¥ncio"], horizontal=True)
    
    if metodo == "Carbono-14":
        modulo_carbono14()
    elif metodo == "Pot√°ssio-Arg√¥nio":
        modulo_potassio_argonio()
    elif metodo == "Ur√¢nio-Chumbo":
        modulo_uranio_chumbo()
    elif metodo == "Rub√≠dio-Estr√¥ncio":
        modulo_rubidio_estroncio()

def modulo_carbono14():
    st.markdown("### üß™ Data√ß√£o por Carbono-14")
    
    col1, col2 = st.columns(2)
    
    with col1:
        f = st.slider("Fra√ß√£o atual de C-14", min_value=0.001, max_value=0.999, value=0.5, step=0.001, 
                     help="Raz√£o entre C-14 atual e C-14 inicial")
        l = st.number_input("Constante de decaimento Œª (anos‚Åª¬π)", min_value=0.000001, value=0.000121, 
                           format="%.6f", help="Valor padr√£o: 0.000121 anos‚Åª¬π (meia-vida de 5730 anos)")
    
    if st.button("üîÑ Calcular Data√ß√£o por C-14", use_container_width=True):
        if f <= 0 or l <= 0:
            st.error("Os valores devem ser positivos!")
            return
            
        with st.spinner("Calculando..."):
            time.sleep(0.5)  # Simula√ß√£o de processamento
            idade = -math.log(f) / l
            
            st.markdown("---")
            st.markdown("### üìä Resultados")
            st.markdown(f'<div class="result-box"><h4>üß™ Idade estimada: <span style="color:#d32f2f">{idade:,.2f} anos</span></h4></div>', unsafe_allow_html=True)
            
            # C√°lculo da meia-vida para verifica√ß√£o
            meia_vida = math.log(2) / l
            st.info(f"Meia-vida utilizada: {meia_vida:,.2f} anos")
            
            st.markdown("**üìê Equa√ß√£o utilizada:** `t = -ln(f) / Œª`")
            
            # Gr√°fico interativo com Plotly
            tempos = np.linspace(0, idade * 1.5, 100)
            fracoes = np.exp(-l * tempos)
            
            fig = go.Figure()
            fig.add_trace(go.Scatter(x=tempos, y=fracoes, mode='lines', name='f(t) = e^(‚ÄìŒªt)',
                                    line=dict(color='royalblue', width=3)))
            fig.add_trace(go.Scatter(x=[idade], y=[f], mode='markers', name='Idade estimada',
                                    marker=dict(color='red', size=10)))
            
            fig.update_layout(
                title="Decaimento do Carbono-14",
                xaxis_title="Tempo (anos)",
                yaxis_title="Fra√ß√£o de C-14",
                hovermode="x unified",
                showlegend=True
            )
            
            st.plotly_chart(fig, use_container_width=True)
            
            # Tabela de dados
            df = pd.DataFrame({"Tempo (anos)": tempos, "Fra√ß√£o de C-14": fracoes})
            st.dataframe(df.head(10), use_container_width=True)
            
            # Op√ß√µes de download
            col1, col2 = st.columns(2)
            with col1:
                st.download_button("üì• Baixar CSV", data=df.to_csv(index=False), 
                                  file_name="carbono14.csv", mime="text/csv",
                                  use_container_width=True)
            with col2:
                st.download_button("üì• Baixar TXT", data=df.to_string(index=False), 
                                  file_name="carbono14.txt", mime="text/plain",
                                  use_container_width=True)

def modulo_potassio_argonio():
    st.markdown("### üîã Data√ß√£o por Pot√°ssio-Arg√¥nio")
    
    col1, col2 = st.columns(2)
    
    with col1:
        R = st.number_input("Raz√£o Ar/K medida", min_value=0.01, value=0.5, step=0.01,
                           help="Raz√£o entre Arg√¥nio-40 e Pot√°ssio-40")
        l = st.number_input("Constante de decaimento Œª (anos‚Åª¬π)", min_value=0.000001, 
                           value=0.000125, format="%.6f",
                           help="Valor padr√£o: 0.000125 anos‚Åª¬π")
    
    if st.button("üîÑ Calcular Data√ß√£o por K-Ar", use_container_width=True):
        if R <= 0 or l <= 0:
            st.error("Os valores devem ser positivos!")
            return
            
        idade = (1 / l) * math.log(1 + R)
        
        st.markdown("---")
        st.markdown("### üìä Resultados")
        st.markdown(f'<div class="result-box"><h4>üîã Idade estimada: <span style="color:#d32f2f">{idade:,.2f} anos</span></h4></div>', unsafe_allow_html=True)
        st.markdown("**üìê Equa√ß√£o utilizada:** `t = (1 / Œª) ¬∑ ln(1 + R)`")
        
        # Gr√°fico
        tempos = np.linspace(0, idade * 1.5, 100)
        razoes = np.exp(l * tempos) - 1
        
        fig = go.Figure()
        fig.add_trace(go.Scatter(x=tempos, y=razoes, mode='lines', name='R(t) = e^(Œªt) ‚Äì 1',
                                line=dict(color='green', width=3)))
        fig.add_trace(go.Scatter(x=[idade], y=[R], mode='markers', name='Idade estimada',
                                marker=dict(color='red', size=10)))
        
        fig.update_layout(
            title="Ac√∫mulo de Arg√¥nio-40",
            xaxis_title="Tempo (anos)",
            yaxis_title="Raz√£o Ar/K",
            hovermode="x unified"
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        # Tabela de dados
        df = pd.DataFrame({"Tempo (anos)": tempos, "Raz√£o Ar/K": razoes})
        st.download_button("üì• Baixar CSV", data=df.to_csv(index=False), 
                          file_name="potassio_argonio.csv", mime="text/csv",
                          use_container_width=True)

def modulo_uranio_chumbo():
    st.markdown("### ‚ò¢Ô∏è Data√ß√£o por Ur√¢nio-Chumbo")
    
    col1, col2 = st.columns(2)
    
    with col1:
        R = st.number_input("Raz√£o Pb/U medida", min_value=0.01, value=0.5, step=0.01,
                           help="Raz√£o entre Chumbo-206 e Ur√¢nio-238")
        l = st.number_input("Constante de decaimento Œª (anos‚Åª¬π)", min_value=0.000001, 
                           value=0.000155, format="%.6f",
                           help="Valor padr√£o: 0.000155 anos‚Åª¬π")
    
    if st.button("üîÑ Calcular Data√ß√£o por U-Pb", use_container_width=True):
        if R <= 0 or l <= 0:
            st.error("Os valores devem ser positivos!")
            return
            
        idade = (1 / l) * math.log(R + 1)
        
        st.markdown("---")
        st.markdown("### üìä Resultados")
        st.markdown(f'<div class="result-box"><h4>‚ò¢Ô∏è Idade estimada: <span style="color:#d32f2f">{idade:,.2f} anos</span></h4></div>', unsafe_allow_html=True)
        st.markdown("**üìê Equa√ß√£o utilizada:** `t = (1 / Œª) ¬∑ ln(R + 1)`")
        
        # Gr√°fico
        tempos = np.linspace(0, idade * 1.5, 100)
        razoes = np.exp(l * tempos) - 1
        
        fig = go.Figure()
        fig.add_trace(go.Scatter(x=tempos, y=razoes, mode='lines', name='R(t) = e^(Œªt) ‚Äì 1',
                                line=dict(color='orange', width=3)))
        fig.add_trace(go.Scatter(x=[idade], y=[R], mode='markers', name='Idade estimada',
                                marker=dict(color='red', size=10)))
        
        fig.update_layout(
            title="Ac√∫mulo de Chumbo-206",
            xaxis_title="Tempo (anos)",
            yaxis_title="Raz√£o Pb/U",
            hovermode="x unified"
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        # Tabela de dados
        df = pd.DataFrame({"Tempo (anos)": tempos, "Raz√£o Pb/U": razoes})
        st.download_button("üì• Baixar CSV", data=df.to_csv(index=False), 
                          file_name="uranio_chumbo.csv", mime="text/csv",
                          use_container_width=True)

def modulo_rubidio_estroncio():
    st.markdown("### üî¨ Data√ß√£o por Rub√≠dio-Estr√¥ncio")
    
    col1, col2 = st.columns(2)
    
    with col1:
        R = st.number_input("Raz√£o Sr/Rb medida", min_value=0.01, value=0.1, step=0.01,
                           help="Raz√£o entre Estr√¥ncio-87 e Rub√≠dio-87")
        l = st.number_input("Constante de decaimento Œª (anos‚Åª¬π)", min_value=0.000001, 
                           value=0.0000142, format="%.8f",
                           help="Valor padr√£o: 1.42 √ó 10‚Åª‚Åµ anos‚Åª¬π")
    
    if st.button("üîÑ Calcular Data√ß√£o por Rb-Sr", use_container_width=True):
        if R <= 0 or l <= 0:
            st.error("Os valores devem ser positivos!")
            return
            
        idade = (1 / l) * math.log(1 + R)
        
        st.markdown("---")
        st.markdown("### üìä Resultados")
        st.markdown(f'<div class="result-box"><h4>üî¨ Idade estimada: <span style="color:#d32f2f">{idade:,.2f} anos</span></h4></div>', unsafe_allow_html=True)
        st.markdown("**üìê Equa√ß√£o utilizada:** `t = (1 / Œª) ¬∑ ln(1 + R)`")
        
        # Gr√°fico
        tempos = np.linspace(0, idade * 1.5, 100)
        razoes = np.exp(l * tempos) - 1
        
        fig = go.Figure()
        fig.add_trace(go.Scatter(x=tempos, y=razoes, mode='lines', name='R(t) = e^(Œªt) ‚Äì 1',
                                line=dict(color='purple', width=3)))
        fig.add_trace(go.Scatter(x=[idade], y=[R], mode='markers', name='Idade estimada',
                                marker=dict(color='red', size=10)))
        
        fig.update_layout(
            title="Ac√∫mulo de Estr√¥ncio-87",
            xaxis_title="Tempo (anos)",
            yaxis_title="Raz√£o Sr/Rb",
            hovermode="x unified"
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        # Tabela de dados
        df = pd.DataFrame({"Tempo (anos)": tempos, "Raz√£o Sr/Rb": razoes})
        st.download_button("üì• Baixar CSV", data=df.to_csv(index=False), 
                          file_name="rubidio_estroncio.csv", mime="text/csv",
                          use_container_width=True)

def modulo_blindagem():
    st.header("üß± C√°lculo de Blindagem Radiol√≥gica")
    
    materials = {
        "Chumbo": 0.77,
        "Concreto": 0.15,
        "√Ågua": 0.07,
        "A√ßo": 0.43,
        "Tungst√™nio": 1.20,
        "Ur√¢nio": 1.50
    }
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        material = st.selectbox("Material", options=list(materials.keys()))
        mu = materials[material]
        st.info(f"Coeficiente de atenua√ß√£o (Œº): {mu} cm‚Åª¬π")
        
    with col2:
        I0 = st.number_input("Dose inicial (¬µSv/h)", min_value=0.01, value=100.0, step=10.0)
        
    with col3:
        I = st.number_input("Dose desejada (¬µSv/h)", min_value=0.01, value=10.0, step=1.0)
    
    if st.button("üß± Calcular Blindagem", use_container_width=True):
        if I0 <= 0 or I <= 0 or mu <= 0:
            st.error("Os valores devem ser positivos!")
            return
            
        if I >= I0:
            st.error("A dose desejada deve ser menor que a dose inicial!")
            return
            
        x = (1 / mu) * math.log(I0 / I)
        
        st.markdown("---")
        st.markdown("### üìä Resultados")
        st.markdown(f'<div class="result-box"><h4>üß± Espessura m√≠nima de {material}: <span style="color:#d32f2f">{x:.2f} cm</span></h4></div>', unsafe_allow_html=True)
        st.markdown("**üìê Equa√ß√£o utilizada:** `x = (1 / Œº) ¬∑ ln(I‚ÇÄ / I)`")
        
        # Gr√°fico
        espessuras = np.linspace(0, x * 1.5, 100)
        doses = I0 * np.exp(-mu * espessuras)
        
        fig = go.Figure()
        fig.add_trace(go.Scatter(x=espessuras, y=doses, mode='lines', name=f'Dose com blindagem de {material}',
                                line=dict(color='blue', width=3)))
        fig.add_trace(go.Scatter(x=[x], y=[I], mode='markers', name='Espessura m√≠nima',
                                marker=dict(color='red', size=10)))
        fig.add_hline(y=I, line_dash="dash", line_color="red", annotation_text="Dose desejada")
        
        fig.update_layout(
            title=f"Atenua√ß√£o da dose com blindagem de {material}",
            xaxis_title="Espessura (cm)",
            yaxis_title="Dose (¬µSv/h)",
            hovermode="x unified"
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        # Compara√ß√£o entre materiais
        st.markdown("### üìä Compara√ß√£o entre Materiais")
        comparacao = []
        for mat, coef in materials.items():
            esp = (1 / coef) * math.log(I0 / I) if I0 > I else 0
            comparacao.append({"Material": mat, "Coeficiente (cm‚Åª¬π)": coef, "Espessura (cm)": esp})
        
        df_comp = pd.DataFrame(comparacao)
        st.dataframe(df_comp, use_container_width=True)
        
        # Resultado para download
        resultado = f"Material: {material}\nDose inicial: {I0} ¬µSv/h\nDose desejada: {I} ¬µSv/h\nŒº: {mu} cm‚Åª¬π\nEspessura m√≠nima: {x:.2f} cm"
        st.download_button("üì• Baixar resultado (.txt)", data=resultado, 
                          file_name="blindagem.txt", mime="text/plain",
                          use_container_width=True)

# Adicione aqui as outras fun√ß√µes dos m√≥dulos (elas permanecem semelhantes √†s originais, mas podem ser melhoradas)

# ... (outras fun√ß√µes de m√≥dulo)

def modulo_decaimento():
    st.header("üìâ Simula√ß√£o de Decaimento Radioativo")
    
    col1, col2 = st.columns(2)
    
    with col1:
        N0 = st.number_input("Quantidade inicial (Bq)", min_value=1.0, value=1000.0)
        meia_vida = st.number_input("Meia-vida (anos)", min_value=0.01, value=5730.0)
        tempo = st.number_input("Tempo decorrido (anos)", min_value=0.0, value=10000.0)
    
    if st.button("üìâ Calcular Decaimento", use_container_width=True):
        lambda_val = math.log(2) / meia_vida
        N = N0 * math.exp(-lambda_val * tempo)
        fra√ß√£o_restante = N / N0
        
        st.markdown("---")
        st.markdown("### üìä Resultados")
        st.markdown(f'<div class="result-box"><h4>üìâ Quantidade restante: <span style="color:#d32f2f">{N:,.2f} Bq</span></h4></div>', unsafe_allow_html=True)
        st.markdown(f'<div class="result-box"><h4>üìä Fra√ß√£o restante: <span style="color:#d32f2f">{fra√ß√£o_restante:.4f}</span></h4></div>', unsafe_allow_html=True)
        st.markdown("**üìê Equa√ß√£o utilizada:** `N = N‚ÇÄ ¬∑ e^(-Œªt)`")
        
        # Gr√°fico
        tempos = np.linspace(0, meia_vida * 5, 100)
        quantidades = N0 * np.exp(-lambda_val * tempos)
        
        fig = go.Figure()
        fig.add_trace(go.Scatter(x=tempos, y=quantidades, mode='lines', name='N(t) = N‚ÇÄ ¬∑ e^(-Œªt)',
                                line=dict(color='red', width=3)))
        fig.add_trace(go.Scatter(x=[tempo], y=[N], mode='markers', name='Valor no tempo especificado',
                                marker=dict(color='blue', size=10)))
        
        # Adicionar linhas de meia-vida
        for i in range(1, 6):
            t_meia_vida = meia_vida * i
            n_meia_vida = N0 * (0.5 ** i)
            fig.add_vline(x=t_meia_vida, line_dash="dash", line_color="green", 
                         annotation_text=f"{i} meia-vida", annotation_position="top right")
            fig.add_hline(y=n_meia_vida, line_dash="dash", line_color="green")
        
        fig.update_layout(
            title="Decaimento Radioativo",
            xaxis_title="Tempo (anos)",
            yaxis_title="Quantidade (Bq)",
            hovermode="x unified"
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        # Tabela de dados
        df = pd.DataFrame({"Tempo (anos)": tempos, "Quantidade (Bq)": quantidades})
        st.download_button("üì• Baixar CSV", data=df.to_csv(index=False), 
                          file_name="decaimento.csv", mime="text/csv",
                          use_container_width=True)

# Mapeamento de fun√ß√µes
modulo_funcoes = {
    "datacao_radiometrica": modulo_datacao_radiometrica,
    "blindagem": modulo_blindagem,
    "radioterapia": modulo_radioterapia,
    "dose": modulo_dose,
    "clinico": modulo_clinico,
    "ambiental": modulo_ambiental,
    "compton": modulo_compton,
    "pares": modulo_pares,
    "ocupacional": modulo_ocupacional,
    "historico": modulo_historico,
    "decaimento": modulo_decaimento,
    "explicativo": modulo_explicativo,
    "quiz": modulo_quiz,
    "exportar": modulo_exportar,
    "comparar": modulo_comparar
}

# Executa o m√≥dulo selecionado
modulo_funcoes[modulos[modulo]]()
